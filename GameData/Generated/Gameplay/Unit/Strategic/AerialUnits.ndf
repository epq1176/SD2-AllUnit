// Ne pas éditer, ce fichier est auto-généré !


export Descriptor_Unit_DPK_Pion_LW_JG1_III is TEntityDescriptor
(
    DescriptorId       = GUID:{408b2ae0-e6f8-4d58-979a-074eb751403a}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_JG1_III'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_JG1_III",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_A8
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_JG1_III'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_A_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "VSGIMGFGJU"),
                     (~/LocalisationConstantes/dico_unites, "FBKUGPNPNI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_JG1_III'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_NAGr_3_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{7c7f9d02-79a8-45e5-8ceb-0eb37d9b95a3}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_NAGr_3_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_NAGr_3_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G8_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_NAGr_3_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "JXVLUPDMFW"),
                     (~/LocalisationConstantes/dico_unites, "JRVMDGWETO"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_NAGr_3_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_NAGr_8_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{c26c092f-1f6f-4db3-9b1e-f1006e1d2327}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_NAGr_8_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_NAGr_8_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G8_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_NAGr_8_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "YJETFTSVXG"),
                     (~/LocalisationConstantes/dico_unites, "JBWKBPIJLW"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_NAGr_8_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_NJG100_I is TEntityDescriptor
(
    DescriptorId       = GUID:{c273d4b9-9b22-4395-a817-dcc6be773874}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_NJG100_I'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_NJG100_I",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_88C6_x20_50_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_NJG100_I'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_88_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "HWHXGFMOKG"),
                     (~/LocalisationConstantes/dico_unites, "RMRNZZRXFE"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_NJG100_I'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_SG1_I is TEntityDescriptor
(
    DescriptorId       = GUID:{b4b72297-f0db-4e0f-b060-965e54fb05c2}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_SG1_I'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_SG1_I",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87D_5_x1_250_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_SG1_I'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BSWCQNFYYC"),
                     (~/LocalisationConstantes/dico_unites, "CVKZKQJAST"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_SG1_I'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_SG1_II is TEntityDescriptor
(
    DescriptorId       = GUID:{8f280bf3-d622-4e5a-89d9-03a2b1884a61}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_SG1_II'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_SG1_II",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_x8_50_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_SG1_II'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "DMEQZHQBEM"),
                     (~/LocalisationConstantes/dico_unites, "BFDMIXUQBW"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_SG1_II'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_SG1_III is TEntityDescriptor
(
    DescriptorId       = GUID:{882fafb5-6fa5-4316-92ea-0627c2f55245}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_SG1_III'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_SG1_III",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_x8_50_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_SG1_III'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "IZOVKAREKT"),
                     (~/LocalisationConstantes/dico_unites, "BHEEFOCCOY"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_SG1_III'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_Pion_LW_SG2_III is TEntityDescriptor
(
    DescriptorId       = GUID:{5e1478f1-8096-4bb3-8d93-dc1104ba699f}
    ClassNameForDebug  = 'Pawn_DPK_Pion_LW_SG2_III'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_Pion_LW_SG2_III",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87_G2_Stuka
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_Pion_LW_SG2_III'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GWLWNAYZXV"),
                     (~/LocalisationConstantes/dico_unites, "ULWTUEHXJF"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_Pion_LW_SG2_III'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_11GBAD is TEntityDescriptor
(
    DescriptorId       = GUID:{2e19fb76-c7ea-494f-93c0-99a4e734a19a}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_11GBAD'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_11GBAD",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_B_25J_30_Mitchell_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_11GBAD'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_B25J_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "QVBVIVVHUV"),
                     (~/LocalisationConstantes/dico_unites, "IVVTHOMYJF"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_11GBAD'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_11Reco is TEntityDescriptor
(
    DescriptorId       = GUID:{9ba0c491-a4fd-4517-994e-2587a077a146}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_11Reco'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_11Reco",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Su_2_M_82_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_11Reco'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Su_2_M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "IYIWGRLSJD"),
                     (~/LocalisationConstantes/dico_unites, "KCRQBRJPAD"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_11Reco'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_133IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{e8c3e7e0-5a0c-4319-8100-b038db5ee02c}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_133IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_133IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9B_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_133IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "KZOXUHFLYP"),
                     (~/LocalisationConstantes/dico_unites, "KABSHCYKLD"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_133IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_139IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{4683fe2b-4862-4daf-8881-ad0f3ca605af}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_139IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_139IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9B_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_139IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "SWPBYHIDPV"),
                     (~/LocalisationConstantes/dico_unites, "ASIZBGZAFL"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_139IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_18GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{dc453945-0be4-4968-9a26-94ae31f3e48b}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_18GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_18GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_18GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_3_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "MIGOKAWUWK"),
                     (~/LocalisationConstantes/dico_unites, "EURMHXBNTK"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_18GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_68GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{b0043f46-18ab-41f9-a309-99ab2869c4b8}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_68GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_68GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_39Q_Airacobra_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_68GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_39_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "JICNQBTZNT"),
                     (~/LocalisationConstantes/dico_unites, "SJJPYQIPLJ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_68GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_723ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{a7791f0f-47c1-4ecc-8d9a-a4bb958975d7}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_723ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_723ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_723ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "LLPNUZUWGH"),
                     (~/LocalisationConstantes/dico_unites, "BKQBLABYQT"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_723ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_72GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{2ebf1107-1e79-485c-88b8-e3dfdfd47b6d}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_72GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_72GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_39Q_Airacobra_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_72GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_39_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "AFCOGCZBLX"),
                     (~/LocalisationConstantes/dico_unites, "MWNBUDHKGO"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_72GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_766ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{29715726-13d2-4d3d-8893-f22ddf9e1990}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_766ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_766ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_766ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "RPWXBLPNBT"),
                     (~/LocalisationConstantes/dico_unites, "DJYYRIQBKS"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_766ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_DPK_SOV_VVS_949ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{fb2ad7dc-f6da-47bb-81f4-b596bdfea402}
    ClassNameForDebug  = 'Pawn_DPK_SOV_VVS_949ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_DPK_SOV_VVS_949ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'DPK_SOV_VVS_949ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XIQHPEUVKD"),
                     (~/LocalisationConstantes/dico_unites, "ZEQCCFKLVE"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_DPK_SOV_VVS_949ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GER_LW_H32_7 is TEntityDescriptor
(
    DescriptorId       = GUID:{c7d549e9-52b3-4d6c-8af1-b70c168d55bf}
    ClassNameForDebug  = 'Pawn_J_Pion_GER_LW_H32_7'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GER_LW_H32_7",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_189A_2_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GER_LW_H32_7'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_189_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BHCSIAMSIF"),
                     (~/LocalisationConstantes/dico_unites, "YPUELYYGSI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GER_LW_H32_7'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GER_LW_NAGr_14 is TEntityDescriptor
(
    DescriptorId       = GUID:{f7c36977-6364-4a1a-a23e-5d8fd6cc25bd}
    ClassNameForDebug  = 'Pawn_J_Pion_GER_LW_NAGr_14'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GER_LW_NAGr_14",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G8_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GER_LW_NAGr_14'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XSGGGFKQNF"),
                     (~/LocalisationConstantes/dico_unites, "JYLBPYIMLK"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GER_LW_NAGr_14'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GER_LW_Nacht1 is TEntityDescriptor
(
    DescriptorId       = GUID:{9c244e5a-5769-47b6-a617-99269372ab7c}
    ClassNameForDebug  = 'Pawn_J_Pion_GER_LW_Nacht1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GER_LW_Nacht1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_DO_17_P1_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GER_LW_Nacht1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Do_17_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "CHOROYHTFR"),
                     (~/LocalisationConstantes/dico_unites, "ETOWQTVFVB"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GER_LW_Nacht1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_JG53_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{e7a2fb2b-05b4-4ed6-8a12-b72c10df19da}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_JG53_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_JG53_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G6_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_JG53_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "HBVUCRUPUP"),
                     (~/LocalisationConstantes/dico_unites, "VLFUBKVVXE"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_JG53_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_JG77_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{6e0ede4d-2041-4daf-b209-35cb32875977}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_JG77_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_JG77_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G6_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_JG77_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "MWXHMJNMTC"),
                     (~/LocalisationConstantes/dico_unites, "OYGGROONAL"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_JG77_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_KG4_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{bb8d5a20-682c-422f-883d-7cffd513c975}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_KG4_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_KG4_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_He_111H_20_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_KG4_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_He_111_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BSFTKGJPZV"),
                     (~/LocalisationConstantes/dico_unites, "BQMMNHRPED"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_KG4_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_SG10_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{0a633ee5-dce3-4689-91f9-1bb888cfbd18}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_SG10_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_SG10_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_x8_50_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_SG10_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "YFLDWYICNR"),
                     (~/LocalisationConstantes/dico_unites, "DFIDPYSPDR"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_SG10_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_SG2_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{c7e71842-207e-48d6-b05b-188afdbcb779}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_SG2_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_SG2_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_x8_50_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_SG2_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "SCTIMXEALX"),
                     (~/LocalisationConstantes/dico_unites, "TNNVTUQLSK"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_SG2_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_SG2_2 is TEntityDescriptor
(
    DescriptorId       = GUID:{d64baeb9-2aa8-4cdf-8712-afc88d7f68e5}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_SG2_2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_SG2_2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_x8_50_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_SG2_2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XTVVQRTPNR"),
                     (~/LocalisationConstantes/dico_unites, "PGAHRSBZTI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_SG2_2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_GR_LW_SG2_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{850294eb-9df2-4c7b-9292-cf348e3aa755}
    ClassNameForDebug  = 'Pawn_J_Pion_GR_LW_SG2_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_GR_LW_SG2_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87D_5_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_GR_LW_SG2_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BYGOMKUWLT"),
                     (~/LocalisationConstantes/dico_unites, "ACUXHCTSEE"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_GR_LW_SG2_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_1RecoInd is TEntityDescriptor
(
    DescriptorId       = GUID:{4a193d55-247b-4654-b02e-0c57527c0307}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_1RecoInd'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_1RecoInd",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Blenheim_Mk_I_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_1RecoInd'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Blenheim_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "YFWILFFYMP"),
                     (~/LocalisationConstantes/dico_unites, "CFWFCANDJU"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_1RecoInd'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup1Bomb is TEntityDescriptor
(
    DescriptorId       = GUID:{60d6eeef-5543-474e-b8c5-8d1ff27c3669}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup1Bomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup1Bomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_JRS_79_B_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup1Bomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_JRS_79_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "EDIZJJTNJQ"),
                     (~/LocalisationConstantes/dico_unites, "AEJGOPKPLW"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup1Bomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup1Vanatore is TEntityDescriptor
(
    DescriptorId       = GUID:{76a0d7d5-0665-4f39-93f7-cd7c8541d339}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup1Vanatore'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup1Vanatore",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_81_C_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup1Vanatore'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_81_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "DJBRKCOEUR"),
                     (~/LocalisationConstantes/dico_unites, "YXGDSADBIP"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup1Vanatore'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup2Bomb is TEntityDescriptor
(
    DescriptorId       = GUID:{f68daae0-ec4f-45ca-aa1d-2214deda92ba}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup2Bomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup2Bomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_JRS_79_B1_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup2Bomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_JRS_79_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "AZNDUHEAIJ"),
                     (~/LocalisationConstantes/dico_unites, "DCQJHPEORI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup2Bomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup4Bomb is TEntityDescriptor
(
    DescriptorId       = GUID:{05ba8b2d-7e96-442a-ba64-07321f9530bf}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup4Bomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup4Bomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_PZL_P_37_B_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup4Bomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_PZL_P_37_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "RWLSUFIBHQ"),
                     (~/LocalisationConstantes/dico_unites, "XQKWWXPLCH"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup4Bomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup5Vanatore is TEntityDescriptor
(
    DescriptorId       = GUID:{4d4a146e-73de-4ae0-87ea-2d0582d69458}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup5Vanatore'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup5Vanatore",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_80_M_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup5Vanatore'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_81_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "HVINKIGCYZ"),
                     (~/LocalisationConstantes/dico_unites, "LYJXVFXUAQ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup5Vanatore'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup6Vanatore is TEntityDescriptor
(
    DescriptorId       = GUID:{fe881e05-33cb-4c88-925e-eec687fa3501}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup6Vanatore'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup6Vanatore",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_81_M_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup6Vanatore'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_81_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "PPKAXNKEJH"),
                     (~/LocalisationConstantes/dico_unites, "FIBCAEYSNB"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup6Vanatore'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_ROU_ARR_Grup8Asalt is TEntityDescriptor
(
    DescriptorId       = GUID:{9b9a70a3-d2a8-4363-963f-767df96d9009}
    ClassNameForDebug  = 'Pawn_J_Pion_ROU_ARR_Grup8Asalt'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_ROU_ARR_Grup8Asalt",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Hs_129_B2_R2_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_ROU_ARR_Grup8Asalt'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Hs_129_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "KUDLWKGNSY"),
                     (~/LocalisationConstantes/dico_unites, "CTXAPZQYYC"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_ROU_ARR_Grup8Asalt'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_116_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{4954119b-eee6-494f-8873-021c4c672c66}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_116_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_116_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_LaGG3_66_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_116_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_LaGG_3_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "HJYPWHBTAX"),
                     (~/LocalisationConstantes/dico_unites, "OWFFAUXNVT"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_116_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_130_ShAPG is TEntityDescriptor
(
    DescriptorId       = GUID:{87ef2dde-a224-437b-b2c9-412ba77c3bf8}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_130_ShAPG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_130_ShAPG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_130_ShAPG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "PWRTGAAFWK"),
                     (~/LocalisationConstantes/dico_unites, "BAUMXVTVHZ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_130_ShAPG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_149_GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{26ede866-19d3-4335-9153-37ff1fc4ac39}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_149_GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_149_GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_7B_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_149_GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_7_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NLYHBNVDBJ"),
                     (~/LocalisationConstantes/dico_unites, "SVJQYOMJND"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_149_GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_150_GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{e242ec87-cf70-4b82-afcd-4a7b1941a6dd}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_150_GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_150_GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_150_GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "ISQCOSFROP"),
                     (~/LocalisationConstantes/dico_unites, "QAZJPQWZHT"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_150_GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_151_GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{87861dbd-5fda-4566-850d-62ad821cc804}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_151_GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_151_GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9T_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_151_GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "RGBXZGHJRO"),
                     (~/LocalisationConstantes/dico_unites, "RCKEDGOOWW"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_151_GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_178_GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{84d82a37-f868-4c1b-92f3-2e87f3b86e4a}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_178_GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_178_GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_La_5FN_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_178_GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_La_5_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "ABZJEJZSIC"),
                     (~/LocalisationConstantes/dico_unites, "GWHVTWMDGD"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_178_GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_210_ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{585d17c2-2e9a-46c5-ad79-b205264262a9}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_210_ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_210_ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_210_ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "SXADJEHRHV"),
                     (~/LocalisationConstantes/dico_unites, "LUCUIVKQBC"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_210_ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_2Morsk_BAP is TEntityDescriptor
(
    DescriptorId       = GUID:{234862d8-d57a-47d8-98b4-9daec52b2551}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_2Morsk_BAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_2Morsk_BAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_A20_G_Havoc_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_2Morsk_BAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_A_20_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "HILZRTKNGR"),
                     (~/LocalisationConstantes/dico_unites, "KIVBUOMYKE"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_2Morsk_BAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_31_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{43e45645-ef2e-4bc0-a9ac-2ee38b80bb43}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_31_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_31_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_La_5FN_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_31_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_La_5_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "MKEOUUXFNB"),
                     (~/LocalisationConstantes/dico_unites, "NTGLERTKNN"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_31_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_40Morsk_BAP is TEntityDescriptor
(
    DescriptorId       = GUID:{df9ae2ab-1f4f-4942-b70a-6b80749fa07c}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_40Morsk_BAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_40Morsk_BAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_40Morsk_BAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "EXJHCZRYVE"),
                     (~/LocalisationConstantes/dico_unites, "ABGWJCZAAT"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_40Morsk_BAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_452_BAP is TEntityDescriptor
(
    DescriptorId       = GUID:{a1374669-9deb-45e3-b164-8d441a52b80a}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_452_BAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_452_BAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_A20_G_Havoc_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_452_BAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_A_20_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "YDVSZDLDSN"),
                     (~/LocalisationConstantes/dico_unites, "SHAPIPHWVG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_452_BAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_566_ShAPG is TEntityDescriptor
(
    DescriptorId       = GUID:{950506dc-337d-4435-a6f4-01ddc004ce20}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_566_ShAPG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_566_ShAPG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_566_ShAPG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NJUIMAACXY"),
                     (~/LocalisationConstantes/dico_unites, "EDZHWOEFMN"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_566_ShAPG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_5Morsk_BAP is TEntityDescriptor
(
    DescriptorId       = GUID:{188cc096-41d1-4dd5-9b67-eeef9f6c8270}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_5Morsk_BAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_5Morsk_BAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_4_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_5Morsk_BAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_4_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NLISECXPCN"),
                     (~/LocalisationConstantes/dico_unites, "JMFWOHUIIF"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_5Morsk_BAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_62Morsk_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{1f770299-8317-4cca-bfce-e51d3395bf97}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_62Morsk_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_62Morsk_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_LaGG3_66_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_62Morsk_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_LaGG_3_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "DHXHNVZSVO"),
                     (~/LocalisationConstantes/dico_unites, "MTQFELMKCB"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_62Morsk_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_639_ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{148738ab-58ab-4534-941d-b43f8ec9b71a}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_639_ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_639_ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_639_ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XZWYCLZQUQ"),
                     (~/LocalisationConstantes/dico_unites, "SSJTDTWMMA"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_639_ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_657_ShAPG is TEntityDescriptor
(
    DescriptorId       = GUID:{2f61e983-6c1b-42ba-8625-e8162a6b2eab}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_657_ShAPG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_657_ShAPG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_657_ShAPG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XIPMCTSXVQ"),
                     (~/LocalisationConstantes/dico_unites, "SXJXFRWQZL"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_657_ShAPG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_715_ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{ab86af8b-0ec9-43f7-b47c-bce44f9bc43a}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_715_ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_715_ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_715_ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "PFCQQMVDXY"),
                     (~/LocalisationConstantes/dico_unites, "MOITMSIOBN"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_715_ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_719_BAP is TEntityDescriptor
(
    DescriptorId       = GUID:{227454be-b656-4c9e-9a25-599fe79cf0c9}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_719_BAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_719_BAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_U2_LNB_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_719_BAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_U2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "MKAWMWIYMF"),
                     (~/LocalisationConstantes/dico_unites, "SAHBAOLPMN"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_719_BAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_7Morsk_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{36eb3e74-bff2-4e83-98cc-1a6f956e0673}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_7Morsk_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_7Morsk_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_40E_Kittyhawk_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_7Morsk_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_40_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "TWYKTAPDXG"),
                     (~/LocalisationConstantes/dico_unites, "QEWCONWNGO"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_7Morsk_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_7Morsk_ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{05fa63dc-1e14-4e84-8a02-03a8bbe2befe}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_7Morsk_ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_7Morsk_ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_7Morsk_ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BDRXGXFJXX"),
                     (~/LocalisationConstantes/dico_unites, "HHYEKUBEGY"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_7Morsk_ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_989_ShAP is TEntityDescriptor
(
    DescriptorId       = GUID:{050849ba-4a9a-45d4-876a-412103c9ad40}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_989_ShAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_989_ShAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_989_ShAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XIPMCTSXVQ"),
                     (~/LocalisationConstantes/dico_unites, "SXJXFRWQZL"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_989_ShAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_VVS_39RReco is TEntityDescriptor
(
    DescriptorId       = GUID:{d93f8bfe-ebbf-406d-8583-edf708de7705}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_VVS_39RReco'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_VVS_39RReco",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_3R_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_VVS_39RReco'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_3_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "MZFCKIEDOB"),
                     (~/LocalisationConstantes/dico_unites, "HZXIVNKUKI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_VVS_39RReco'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_J_Pion_SOV_VVS_511RReco is TEntityDescriptor
(
    DescriptorId       = GUID:{2a300cbf-0db2-4225-a378-e29a1df42dc0}
    ClassNameForDebug  = 'Pawn_J_Pion_SOV_VVS_511RReco'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_J_Pion_SOV_VVS_511RReco",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_3R_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'J_Pion_SOV_VVS_511RReco'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_3_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "MZFCKIEDOB"),
                     (~/LocalisationConstantes/dico_unites, "WCGCHZAGZI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_J_Pion_SOV_VVS_511RReco'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_FIN_LeR3 is TEntityDescriptor
(
    DescriptorId       = GUID:{6c3bdb29-364e-426d-9a33-82e3d53e53b6}
    ClassNameForDebug  = 'Pawn_Kar_Pion_FIN_LeR3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_FIN_LeR3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G2_FIN
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_FIN_LeR3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_FIN'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "RWAVADINVK"),
                     (~/LocalisationConstantes/dico_unites, "BWADCQRHSJ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_FIN_LeR3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_FIN_LeR4 is TEntityDescriptor
(
    DescriptorId       = GUID:{72e59ef0-6bbb-4e62-9e9d-57498557ddaf}
    ClassNameForDebug  = 'Pawn_Kar_Pion_FIN_LeR4'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_FIN_LeR4",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Bristol_Bleinheim_MkIV_x2_250_FIN
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_FIN_LeR4'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Blenheim_FIN'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "KSKLGAECSJ"),
                     (~/LocalisationConstantes/dico_unites, "JMFSKNTXLW"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_FIN_LeR4'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_FIN_TLeLv16 is TEntityDescriptor
(
    DescriptorId       = GUID:{fd602e43-b727-4ba8-a0d5-a82a8e8b3d80}
    ClassNameForDebug  = 'Pawn_Kar_Pion_FIN_TLeLv16'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_FIN_TLeLv16",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Gloster_Gladiator_Mk_II_FIN
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_FIN_TLeLv16'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Gladiator_FIN'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "KEALBPRHTP"),
                     (~/LocalisationConstantes/dico_unites, "VBDYVSIPLA"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_FIN_TLeLv16'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_GR_JG54_2 is TEntityDescriptor
(
    DescriptorId       = GUID:{13386bb5-2da5-4e64-9765-ded352dddf35}
    ClassNameForDebug  = 'Pawn_Kar_Pion_GR_JG54_2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_GR_JG54_2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_A6_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_GR_JG54_2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_A_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "PFETTREPKL"),
                     (~/LocalisationConstantes/dico_unites, "CEBYRGKITU"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_GR_JG54_2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_GR_NaGr_5_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{bd22fd3a-0a64-4607-a34a-05aa336a3057}
    ClassNameForDebug  = 'Pawn_Kar_Pion_GR_NaGr_5_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_GR_NaGr_5_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_G8_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_GR_NaGr_5_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OILMDSRVVK"),
                     (~/LocalisationConstantes/dico_unites, "WEFUZNJVHN"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_GR_NaGr_5_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_GR_SG3_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{6dfbb066-5a78-40c3-8695-1ec2e0d185fe}
    ClassNameForDebug  = 'Pawn_Kar_Pion_GR_SG3_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_GR_SG3_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87D_5_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_GR_SG3_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "UBWILFDWDX"),
                     (~/LocalisationConstantes/dico_unites, "GAQUCJJGCY"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_GR_SG3_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_GR_SG5_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{5b4a1468-4f06-41de-a63b-2ebef5daeb21}
    ClassNameForDebug  = 'Pawn_Kar_Pion_GR_SG5_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_GR_SG5_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_x12_80mm_AP_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_GR_SG5_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "VEKPPCNGVI"),
                     (~/LocalisationConstantes/dico_unites, "HNIVYSIMFY"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_GR_SG5_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_14_GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{39a31d38-df41-4585-829f-8ac4fb6d616e}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_14_GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_14_GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_14_GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "FKVLXGSCZM"),
                     (~/LocalisationConstantes/dico_unites, "ZTOWZLVSNN"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_14_GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_159_GIAP is TEntityDescriptor
(
    DescriptorId       = GUID:{cf7954da-5dcd-46e2-bde5-b0114e720426}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_159_GIAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_159_GIAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_La_5FN_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_159_GIAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_La_5_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "AUBWSMHHTY"),
                     (~/LocalisationConstantes/dico_unites, "KJVXUGRJCU"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_159_GIAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_191_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{1a4baf30-25d2-4372-b564-093eed1e125a}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_191_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_191_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_40E_Kittyhawk_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_191_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_40_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "TMPSMKIYSK"),
                     (~/LocalisationConstantes/dico_unites, "BBULXNWHVV"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_191_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_196_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{261fbc27-f62e-4c1d-8d99-ae1e56c6a4cf}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_196_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_196_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_39N_Airacobra_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_196_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_39_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "ZKJALIOKZG"),
                     (~/LocalisationConstantes/dico_unites, "SXHPVPXRBS"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_196_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_566_ShAD is TEntityDescriptor
(
    DescriptorId       = GUID:{b47c33f5-da3b-4d56-ab26-347194480772}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_566_ShAD'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_566_ShAD",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_566_ShAD'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "YKDEFBBDCS"),
                     (~/LocalisationConstantes/dico_unites, "CVVJKERVAS"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_566_ShAD'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_58_BAD is TEntityDescriptor
(
    DescriptorId       = GUID:{472045d1-c199-4c08-8311-682991bcbc99}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_58_BAD'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_58_BAD",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_58_BAD'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "PPFAEPMCZN"),
                     (~/LocalisationConstantes/dico_unites, "KJOHCDNLBC"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_58_BAD'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_943_ShAD is TEntityDescriptor
(
    DescriptorId       = GUID:{ffda383a-b9da-434b-b910-11d7426033fd}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_943_ShAD'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_943_ShAD",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_943_ShAD'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "XRTTBKAGCF"),
                     (~/LocalisationConstantes/dico_unites, "GWDSJXTHZC"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_943_ShAD'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_GdsTropBomber is TEntityDescriptor
(
    DescriptorId       = GUID:{230d980f-8d58-4752-a8cf-baed1adf29d8}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_GdsTropBomber'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_GdsTropBomber",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_A20_G_Havoc_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_GdsTropBomber'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_A_20_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "WMLMBMUDLV"),
                     (~/LocalisationConstantes/dico_unites, "BNRVIKXHPJ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_GdsTropBomber'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Kar_Pion_SOV_SepReco_13 is TEntityDescriptor
(
    DescriptorId       = GUID:{74223927-fc7c-4a36-b19f-a57f9199714d}
    ClassNameForDebug  = 'Pawn_Kar_Pion_SOV_SepReco_13'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Kar_Pion_SOV_SepReco_13",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2R_FIN
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Kar_Pion_SOV_SepReco_13'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_FIN'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "WXXQVJFIVW"),
                     (~/LocalisationConstantes/dico_unites, "EXOLVHOHEM"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Kar_Pion_SOV_SepReco_13'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_FlieDiv1 is TEntityDescriptor
(
    DescriptorId       = GUID:{fd172723-5bee-4466-8fbb-18c19530b5ba}
    ClassNameForDebug  = 'Pawn_Pion_GR_FlieDiv1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_FlieDiv1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_FlieDiv1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "R_FlieDiv1"),
                     (~/LocalisationConstantes/dico_unites, "R_FlieDiv1"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_FlieDiv1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_FlieDiv4 is TEntityDescriptor
(
    DescriptorId       = GUID:{415c2ebe-c53f-4bc2-931e-962d6a65914a}
    ClassNameForDebug  = 'Pawn_Pion_GR_FlieDiv4'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_FlieDiv4",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_188F1_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_FlieDiv4'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_188_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "R_FlieDiv4"),
                     (~/LocalisationConstantes/dico_unites, "R_FlieDiv4"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_FlieDiv4'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_FlieFu1 is TEntityDescriptor
(
    DescriptorId       = GUID:{c789b9de-98ae-4fff-a530-17f1228cf901}
    ClassNameForDebug  = 'Pawn_Pion_GR_FlieFu1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_FlieFu1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87_D_Stuka
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_FlieFu1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_FlieFu1"),
                     (~/LocalisationConstantes/dico_unites, "GR_FlieFu1"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_FlieFu1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_FlieKorps4 is TEntityDescriptor
(
    DescriptorId       = GUID:{e2fb9d32-2469-4d6c-9fb2-f077cebc7e08}
    ClassNameForDebug  = 'Pawn_Pion_GR_FlieKorps4'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_FlieKorps4",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_He_111H_21_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_FlieKorps4'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_He_111_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "FlieKorps4"),
                     (~/LocalisationConstantes/dico_unites, "FlieKorps4"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_FlieKorps4'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_JAF6 is TEntityDescriptor
(
    DescriptorId       = GUID:{99272729-132e-481f-99c7-2dfd1610f0d2}
    ClassNameForDebug  = 'Pawn_Pion_GR_JAF6'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_JAF6",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_A8
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_JAF6'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_A_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_JAF6"),
                     (~/LocalisationConstantes/dico_unites, "GR_JAF6"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_JAF6'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_JAG51_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{b2a97702-8c03-42ae-af31-29ae16ab6ca4}
    ClassNameForDebug  = 'Pawn_Pion_GR_JAG51_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_JAG51_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_JAG51_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_JAG51_1"),
                     (~/LocalisationConstantes/dico_unites, "GR_JAG51_1"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_JAG51_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_JAG51_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{4f8b39cd-e813-4abf-832f-e9b88ad81197}
    ClassNameForDebug  = 'Pawn_Pion_GR_JAG51_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_JAG51_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_JAG51_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_JAG51_3"),
                     (~/LocalisationConstantes/dico_unites, "GR_JAG51_3"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_JAG51_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_JG11_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{868b06e3-a8d5-4238-8646-05a9c092392f}
    ClassNameForDebug  = 'Pawn_Pion_GR_JG11_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_JG11_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_A8
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_JG11_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_A_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_JG11_3"),
                     (~/LocalisationConstantes/dico_unites, "GR_JG11_3"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_JG11_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_KG4_2 is TEntityDescriptor
(
    DescriptorId       = GUID:{163bedf0-4507-4f92-9f94-549ea084059a}
    ClassNameForDebug  = 'Pawn_Pion_GR_KG4_2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_KG4_2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_He_111H_21_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_KG4_2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_He_111_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_KG4_2"),
                     (~/LocalisationConstantes/dico_unites, "XLQMONZFND"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_KG4_2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_KG4_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{737eddfe-26b2-466b-bc19-53455dd47801}
    ClassNameForDebug  = 'Pawn_Pion_GR_KG4_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_KG4_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_He_111H_21_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_KG4_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_He_111_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_KG4_3"),
                     (~/LocalisationConstantes/dico_unites, "DKWQOBKNAK"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_KG4_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NAG4 is TEntityDescriptor
(
    DescriptorId       = GUID:{150f030d-54cd-4b46-a56c-58ba76c6a276}
    ClassNameForDebug  = 'Pawn_Pion_GR_NAG4'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NAG4",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NAG4'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_NAG4"),
                     (~/LocalisationConstantes/dico_unites, "GR_NAG4"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NAG4'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NAG4_2 is TEntityDescriptor
(
    DescriptorId       = GUID:{d79644c3-a359-46ad-904e-50b2c3e37fe4}
    ClassNameForDebug  = 'Pawn_Pion_GR_NAG4_2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NAG4_2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NAG4_2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_NAG4_2"),
                     (~/LocalisationConstantes/dico_unites, "GR_NAG4_2"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NAG4_2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NAG4_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{d4cf213b-1061-44fc-8bbf-05958062daf1}
    ClassNameForDebug  = 'Pawn_Pion_GR_NAG4_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NAG4_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NAG4_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_NAG4_3"),
                     (~/LocalisationConstantes/dico_unites, "GR_NAG4_3"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NAG4_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NAG5 is TEntityDescriptor
(
    DescriptorId       = GUID:{27b9a1ff-00d8-4edb-a83d-18386e8e0334}
    ClassNameForDebug  = 'Pawn_Pion_GR_NAG5'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NAG5",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_R6
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NAG5'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_NAG5"),
                     (~/LocalisationConstantes/dico_unites, "GR_NAG5"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NAG5'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NJG100_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{5f5c07f5-b653-49f0-b54f-56299fc4561d}
    ClassNameForDebug  = 'Pawn_Pion_GR_NJG100_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NJG100_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_88C6_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NJG100_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_88_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "R_NJG100_1"),
                     (~/LocalisationConstantes/dico_unites, "R_NJG100_1"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NJG100_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NSGr1 is TEntityDescriptor
(
    DescriptorId       = GUID:{c0eb03e1-a12d-436b-97d5-6763d9094eac}
    ClassNameForDebug  = 'Pawn_Pion_GR_NSGr1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NSGr1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87_D_Stuka
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NSGr1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_NSGr1"),
                     (~/LocalisationConstantes/dico_unites, "GR_NSGr1"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NSGr1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_NSGr2 is TEntityDescriptor
(
    DescriptorId       = GUID:{a8cb2ad5-8bc6-4600-aa1e-4619f7d90372}
    ClassNameForDebug  = 'Pawn_Pion_GR_NSGr2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_NSGr2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87_D_Stuka
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_NSGr2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_NSGr2"),
                     (~/LocalisationConstantes/dico_unites, "GR_NSGr2"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_NSGr2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_Sch1G_1 is TEntityDescriptor
(
    DescriptorId       = GUID:{6f5ca9ad-3083-414f-87b9-5ffd7e1fda76}
    ClassNameForDebug  = 'Pawn_Pion_GR_Sch1G_1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_Sch1G_1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87D_5_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_Sch1G_1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_Sch1G_1"),
                     (~/LocalisationConstantes/dico_unites, "GR_Sch1G_1"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_Sch1G_1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_GR_SchG1_3 is TEntityDescriptor
(
    DescriptorId       = GUID:{23189714-1477-4136-a66d-5a31d3df6170}
    ClassNameForDebug  = 'Pawn_Pion_GR_SchG1_3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_GR_SchG1_3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_G8_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_GR_SchG1_3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_SchG1_3"),
                     (~/LocalisationConstantes/dico_unites, "GR_SchG1_3"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_GR_SchG1_3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_10RBombG is TEntityDescriptor
(
    DescriptorId       = GUID:{a7fde6ff-dd52-41d9-82fd-f48fb47fe175}
    ClassNameForDebug  = 'Pawn_Pion_SOV_10RBombG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_10RBombG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_A20_C_Havoc_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_10RBombG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_A_20_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_10RBombG"),
                     (~/LocalisationConstantes/dico_unites, "V_10RBombG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_10RBombG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_10RReco_2 is TEntityDescriptor
(
    DescriptorId       = GUID:{2db486c6-4cf2-42cc-b020-5eb6096d686e}
    ClassNameForDebug  = 'Pawn_Pion_SOV_10RReco_2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_10RReco_2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2R_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_10RReco_2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2R_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "10RReco_2"),
                     (~/LocalisationConstantes/dico_unites, "10RReco_2"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_10RReco_2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_117RRecoG is TEntityDescriptor
(
    DescriptorId       = GUID:{520f02e6-8879-4387-a701-8951015c1157}
    ClassNameForDebug  = 'Pawn_Pion_SOV_117RRecoG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_117RRecoG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2R_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_117RRecoG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2R_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "_117RRecoG"),
                     (~/LocalisationConstantes/dico_unites, "_117RRecoG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_117RRecoG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_12RBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{33cf04c1-4999-4b6e-84a2-d54501b76a78}
    ClassNameForDebug  = 'Pawn_Pion_SOV_12RBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_12RBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Tu_2S_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_12RBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Tu_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OV_12RBomb"),
                     (~/LocalisationConstantes/dico_unites, "OV_12RBomb"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_12RBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_134RBombG is TEntityDescriptor
(
    DescriptorId       = GUID:{852b3fb1-3842-493f-b7b4-073c0b23ee8a}
    ClassNameForDebug  = 'Pawn_Pion_SOV_134RBombG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_134RBombG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_134RBombG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "_134RBombG"),
                     (~/LocalisationConstantes/dico_unites, "_134RBombG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_134RBombG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_135RBombG is TEntityDescriptor
(
    DescriptorId       = GUID:{de75e926-c7a3-4c29-8e53-68401e7af370}
    ClassNameForDebug  = 'Pawn_Pion_SOV_135RBombG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_135RBombG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_135RBombG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "_135RBombG"),
                     (~/LocalisationConstantes/dico_unites, "_135RBombG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_135RBombG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_137RChasG is TEntityDescriptor
(
    DescriptorId       = GUID:{134b8062-516f-475b-a9de-7570e61f876c}
    ClassNameForDebug  = 'Pawn_Pion_SOV_137RChasG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_137RChasG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_La_5FN_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_137RChasG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_La_5_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "_137RChasG"),
                     (~/LocalisationConstantes/dico_unites, "_137RChasG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_137RChasG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_16ArmAir is TEntityDescriptor
(
    DescriptorId       = GUID:{9a7eb2c4-d439-4bbc-990d-2d832f5a4bf9}
    ClassNameForDebug  = 'Pawn_Pion_SOV_16ArmAir'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_16ArmAir",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_16ArmAir'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_16ArmAir"),
                     (~/LocalisationConstantes/dico_unites, "LVYJOQTMYY"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_16ArmAir'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_1ArmAir is TEntityDescriptor
(
    DescriptorId       = GUID:{3be6ba85-7180-4a8f-bed8-7055bbb63b8e}
    ClassNameForDebug  = 'Pawn_Pion_SOV_1ArmAir'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_1ArmAir",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_HQ_Air",
                        "Texture_STRATEGIC_HQ_Air",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_1ArmAir'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = 0 * Metre
                MinBattleSupportRadius = 0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "KMMOSNTUXI"),
                     (~/LocalisationConstantes/dico_unites, "OV_1ArmAir"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_1ArmAir'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_273RChas is TEntityDescriptor
(
    DescriptorId       = GUID:{c1068440-7d4f-443f-82f3-bb8aaaf99738}
    ClassNameForDebug  = 'Pawn_Pion_SOV_273RChas'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_273RChas",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_273RChas'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_273RChas"),
                     (~/LocalisationConstantes/dico_unites, "V_273RChas"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_273RChas'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_274RChas is TEntityDescriptor
(
    DescriptorId       = GUID:{322e0049-ab6b-4a30-b297-9fe17ea5ada3}
    ClassNameForDebug  = 'Pawn_Pion_SOV_274RChas'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_274RChas",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9T_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_274RChas'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_274RChas"),
                     (~/LocalisationConstantes/dico_unites, "V_274RChas"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_274RChas'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_291RChas is TEntityDescriptor
(
    DescriptorId       = GUID:{8d490746-9ec0-4422-98ca-0f4a299c1b9e}
    ClassNameForDebug  = 'Pawn_Pion_SOV_291RChas'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_291RChas",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_LaGG3_66_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_291RChas'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_LaGG_3_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_291RChas"),
                     (~/LocalisationConstantes/dico_unites, "V_291RChas"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_291RChas'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_347RChas is TEntityDescriptor
(
    DescriptorId       = GUID:{5b0ce3df-44ee-4b80-a6c0-1b84c5187930}
    ClassNameForDebug  = 'Pawn_Pion_SOV_347RChas'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_347RChas",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_347RChas'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_347RChas"),
                     (~/LocalisationConstantes/dico_unites, "V_347RChas"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_347RChas'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_35RBombG is TEntityDescriptor
(
    DescriptorId       = GUID:{889855e8-f979-4f44-b953-f749a5968244}
    ClassNameForDebug  = 'Pawn_Pion_SOV_35RBombG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_35RBombG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_35RBombG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_35RBombG"),
                     (~/LocalisationConstantes/dico_unites, "V_35RBombG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_35RBombG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_523RChas is TEntityDescriptor
(
    DescriptorId       = GUID:{8ca4ff32-d3ac-4068-91bd-5472bd0cf4c2}
    ClassNameForDebug  = 'Pawn_Pion_SOV_523RChas'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_523RChas",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_La_5FN_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_523RChas'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_La_5_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_523RChas"),
                     (~/LocalisationConstantes/dico_unites, "V_523RChas"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_523RChas'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_54RBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{f21c99fe-6a1e-4fbf-9999-35e4f6ea1e16}
    ClassNameForDebug  = 'Pawn_Pion_SOV_54RBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_54RBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_54RBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OV_54RBomb"),
                     (~/LocalisationConstantes/dico_unites, "OV_54RBomb"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_54RBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_621RAslt is TEntityDescriptor
(
    DescriptorId       = GUID:{5f1c8b65-c68f-4ce0-9ca0-8ed82b657eb0}
    ClassNameForDebug  = 'Pawn_Pion_SOV_621RAslt'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_621RAslt",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_621RAslt'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_621RAslt"),
                     (~/LocalisationConstantes/dico_unites, "V_621RAslt"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_621RAslt'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_6RBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{de558e39-afde-4615-9b81-b42b05a8ab06}
    ClassNameForDebug  = 'Pawn_Pion_SOV_6RBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_6RBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_6RBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "SOV_6RBomb"),
                     (~/LocalisationConstantes/dico_unites, "SOV_6RBomb"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_6RBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_74RAsltG is TEntityDescriptor
(
    DescriptorId       = GUID:{9df1960b-e3ad-4f35-b6f6-79e16b3eb98a}
    ClassNameForDebug  = 'Pawn_Pion_SOV_74RAsltG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_74RAsltG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_74RAsltG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_74RAsltG"),
                     (~/LocalisationConstantes/dico_unites, "V_74RAsltG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_74RAsltG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_893RAslt is TEntityDescriptor
(
    DescriptorId       = GUID:{1e0fc98e-2d64-45cc-a96b-9fc0ca3f5d58}
    ClassNameForDebug  = 'Pawn_Pion_SOV_893RAslt'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_893RAslt",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M3_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_893RAslt'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_893RAslt"),
                     (~/LocalisationConstantes/dico_unites, "V_893RAslt"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_893RAslt'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_8RChasG is TEntityDescriptor
(
    DescriptorId       = GUID:{bb8fa63c-43e3-436a-9c3c-4274cb5b4583}
    ClassNameForDebug  = 'Pawn_Pion_SOV_8RChasG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_8RChasG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_8RChasG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OV_8RChasG"),
                     (~/LocalisationConstantes/dico_unites, "OV_8RChasG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_8RChasG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_946RAslt is TEntityDescriptor
(
    DescriptorId       = GUID:{5bab66b4-d794-41d5-bae2-dce6b39f6d4c}
    ClassNameForDebug  = 'Pawn_Pion_SOV_946RAslt'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_946RAslt",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_946RAslt'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_946RAslt"),
                     (~/LocalisationConstantes/dico_unites, "V_946RAslt"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_946RAslt'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_99RBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{1a581da5-4b72-4331-8c9d-bb51e6a817f6}
    ClassNameForDebug  = 'Pawn_Pion_SOV_99RBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_99RBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_99RBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.0
                        TimeBetweenEachIdentifyRoll = 0.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OV_99RBomb"),
                     (~/LocalisationConstantes/dico_unites, "OV_99RBomb"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_99RBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
                  ('AerBomb', TActionCall(Action=$/GFX/Everything/FX_Steelman_destructionUnit)),
            ]
            SoundByActionList = MAP
            [
                  ('AerBomb', TSoundDescriptor
                      (
                          SoundSettings = $/SoundSettings/SFX_SoundSettings
                          TheSoundStream = TSoundStream(FileName = 'GameData:/Assets/Sons/SFX\Impact\GE_Impact_ArtillerieSol_Near_03.wav')
                      )
                  ),
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_9RChasG is TEntityDescriptor
(
    DescriptorId       = GUID:{97af0265-f496-4bfb-999c-96c121ed671f}
    ClassNameForDebug  = 'Pawn_Pion_SOV_9RChasG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_9RChasG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_39N_Airacobra_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_9RChasG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_39_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OV_9RChasG"),
                     (~/LocalisationConstantes/dico_unites, "OV_9RChasG"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_9RChasG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Pion_SOV_NorRChas is TEntityDescriptor
(
    DescriptorId       = GUID:{8e136840-3e12-41ce-a516-93d27900ec2e}
    ClassNameForDebug  = 'Pawn_Pion_SOV_NorRChas'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Pion_SOV_NorRChas",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9_FR
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Pion_SOV_NorRChas'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_FR'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "V_NorRChas"),
                     (~/LocalisationConstantes/dico_unites, "V_NorRChas"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Pion_SOV_NorRChas'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_AWP_MixedAir is TEntityDescriptor
(
    DescriptorId       = GUID:{c0653d0b-35e2-4610-bf1e-9c0605ed4bf4}
    ClassNameForDebug  = 'Pawn_Si_Pion_AWP_MixedAir'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_AWP_MixedAir",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_1B_AWP
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_AWP_MixedAir'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_1_POL'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "ZJKEVYRFYD"),
                     (~/LocalisationConstantes/dico_unites, "ITJFMLWGGW"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_AWP_MixedAir'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_GER_AufkGr122 is TEntityDescriptor
(
    DescriptorId       = GUID:{fe39cc81-fc72-48d3-b06d-abadcbfdd2fb}
    ClassNameForDebug  = 'Pawn_Si_Pion_GER_AufkGr122'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_GER_AufkGr122",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_410_A3_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_GER_AufkGr122'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_410_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "YMGELGRTTY"),
                     (~/LocalisationConstantes/dico_unites, "DPLPSDALEL"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_GER_AufkGr122'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_GER_JG1_Gr1 is TEntityDescriptor
(
    DescriptorId       = GUID:{8bacd46c-43ef-44d8-be27-6b44d8cc4e0d}
    ClassNameForDebug  = 'Pawn_Si_Pion_GER_JG1_Gr1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_GER_JG1_Gr1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_A8
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_GER_JG1_Gr1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_A_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "QJMVHRUKDJ"),
                     (~/LocalisationConstantes/dico_unites, "YORGINQPVA"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_GER_JG1_Gr1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_GER_JG51_Gr1 is TEntityDescriptor
(
    DescriptorId       = GUID:{a5f58f93-d553-433f-9ee5-a4e13aa16f26}
    ClassNameForDebug  = 'Pawn_Si_Pion_GER_JG51_Gr1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_GER_JG51_Gr1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G6_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_GER_JG51_Gr1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "QOKHATXYEU"),
                     (~/LocalisationConstantes/dico_unites, "GHLMANEXMP"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_GER_JG51_Gr1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_GER_KG4_Gr2 is TEntityDescriptor
(
    DescriptorId       = GUID:{9a80e9a6-b48f-4155-aa69-a5c26bec24ac}
    ClassNameForDebug  = 'Pawn_Si_Pion_GER_KG4_Gr2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_GER_KG4_Gr2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_He_111H_21_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_GER_KG4_Gr2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_He_111_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GR_KG4_2"),
                     (~/LocalisationConstantes/dico_unites, "XLQMONZFND"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_GER_KG4_Gr2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_GER_SG1_Gr1 is TEntityDescriptor
(
    DescriptorId       = GUID:{0c81495d-ac1b-4216-b52e-90184abcdb7b}
    ClassNameForDebug  = 'Pawn_Si_Pion_GER_SG1_Gr1'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_GER_SG1_Gr1",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87_D_Stuka
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_GER_SG1_Gr1'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "JVAAYBIDCF"),
                     (~/LocalisationConstantes/dico_unites, "PXZCWZGIEI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_GER_SG1_Gr1'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_GER_SG77_Gr3 is TEntityDescriptor
(
    DescriptorId       = GUID:{cf78e0d6-f374-47fb-8da6-2c5a9c031734}
    ClassNameForDebug  = 'Pawn_Si_Pion_GER_SG77_Gr3'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_GER_SG77_Gr3",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87_D_Stuka
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_GER_SG77_Gr3'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BKNNXAOPKJ"),
                     (~/LocalisationConstantes/dico_unites, "ZCEOISAGAV"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_GER_SG77_Gr3'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_SOV_24RBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{fef2b4af-42fd-42a9-acb0-2b8ff567c728}
    ClassNameForDebug  = 'Pawn_Si_Pion_SOV_24RBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_SOV_24RBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Pe_2_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_SOV_24RBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Pe_2_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NQNCLGGHWD"),
                     (~/LocalisationConstantes/dico_unites, "BBEUAJCLGI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_SOV_24RBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_SOV_68RChasG is TEntityDescriptor
(
    DescriptorId       = GUID:{61088a0f-31f8-4935-acc6-7c50983d030a}
    ClassNameForDebug  = 'Pawn_Si_Pion_SOV_68RChasG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_SOV_68RChasG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_P_39Q_Airacobra_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_SOV_68RChasG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_P_39_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "SLLHPFRHIA"),
                     (~/LocalisationConstantes/dico_unites, "UUWBUMCDPP"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_SOV_68RChasG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_Si_Pion_SOV_70RAslt is TEntityDescriptor
(
    DescriptorId       = GUID:{26f11cee-54f8-4523-ace9-39b790001d11}
    ClassNameForDebug  = 'Pawn_Si_Pion_SOV_70RAslt'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_Si_Pion_SOV_70RAslt",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'Si_Pion_SOV_70RAslt'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 3
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "CIOFTPKUQW"),
                     (~/LocalisationConstantes/dico_unites, "MILVHFCWTF"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_Si_Pion_SOV_70RAslt'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_GER_LW_JG52_2 is TEntityDescriptor
(
    DescriptorId       = GUID:{8777aa2a-f1b7-4832-84ad-a7ebd2f15f4e}
    ClassNameForDebug  = 'Pawn_T_Pion_GER_LW_JG52_2'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_GER_LW_JG52_2",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G6_GER
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_GER_LW_JG52_2'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NXTXSJPPVY"),
                     (~/LocalisationConstantes/dico_unites, "SDYZMKZCVQ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_GER_LW_JG52_2'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_HON_MKHL_102_AsltBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{ef8b58d5-ccd0-4a35-97da-6d84f01562ab}
    ClassNameForDebug  = 'Pawn_T_Pion_HON_MKHL_102_AsltBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_HON_MKHL_102_AsltBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_190_F8_HON
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_HON_MKHL_102_AsltBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_190_F_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "SZVRAPDGZI"),
                     (~/LocalisationConstantes/dico_unites, "DTYGXZGLHX"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_HON_MKHL_102_AsltBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_HON_MKHL_102_Chass is TEntityDescriptor
(
    DescriptorId       = GUID:{66f3bdb5-f132-4bc7-8cf3-07a04f7df22e}
    ClassNameForDebug  = 'Pawn_T_Pion_HON_MKHL_102_Chass'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_HON_MKHL_102_Chass",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109G6_HON
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_HON_MKHL_102_Chass'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_G_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "UDTVWDVNCS"),
                     (~/LocalisationConstantes/dico_unites, "XUTZSXVRJQ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_HON_MKHL_102_Chass'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_HON_MKHL_102_DiveBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{d2b1bfcd-7b4e-40a0-a451-6c84bf8c0260}
    ClassNameForDebug  = 'Pawn_T_Pion_HON_MKHL_102_DiveBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_HON_MKHL_102_DiveBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87D_5_HON
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_HON_MKHL_102_DiveBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "RJJMMORSHQ"),
                     (~/LocalisationConstantes/dico_unites, "MBOCYSISAU"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_HON_MKHL_102_DiveBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_HON_MKHL_102_FastBomb is TEntityDescriptor
(
    DescriptorId       = GUID:{7477d911-3928-4e62-af28-491bf63109cb}
    ClassNameForDebug  = 'Pawn_T_Pion_HON_MKHL_102_FastBomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_HON_MKHL_102_FastBomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_88A4_HON
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_HON_MKHL_102_FastBomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_88_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "UOPRGOZNWE"),
                     (~/LocalisationConstantes/dico_unites, "QOPUWDWTQA"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_HON_MKHL_102_FastBomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_HON_MKHL_102_Reco is TEntityDescriptor
(
    DescriptorId       = GUID:{e29d8706-4b16-4d1c-8b31-9ab8c99da14c}
    ClassNameForDebug  = 'Pawn_T_Pion_HON_MKHL_102_Reco'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Axis
                    MotherCountry                    = 'HON'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'HON'
                            Nationalite                      = ENationalite/Axis
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_HON_MKHL_102_Reco",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Fw_189A_2_HON
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_HON_MKHL_102_Reco'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Fw_189_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "ZTPDCAEOAQ"),
                     (~/LocalisationConstantes/dico_unites, "EXKWUHZJXI"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_HON_MKHL_102_Reco'
            CountryTexture = 'CommonTexture_MotherCountryFlag_HON'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_12ObsInd is TEntityDescriptor
(
    DescriptorId       = GUID:{a5d36ea3-9dbe-493c-a334-3ba805f0693b}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_12ObsInd'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_12ObsInd",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_39_A_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_12ObsInd'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_37_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "TDQHXVRBDR"),
                     (~/LocalisationConstantes/dico_unites, "UFYNTMVVJK"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_12ObsInd'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_2RecoInd is TEntityDescriptor
(
    DescriptorId       = GUID:{5d7383e9-61e1-433d-af7c-a4751061a5d4}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_2RecoInd'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_2RecoInd",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_37_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_2RecoInd'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_37_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OWLDBQPTSC"),
                     (~/LocalisationConstantes/dico_unites, "HKKLYTFBTT"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_2RecoInd'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_68VanatoreNoapte is TEntityDescriptor
(
    DescriptorId       = GUID:{de3f0568-91e9-4b5c-b831-93af55bff1d5}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_68VanatoreNoapte'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Recon
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Recon
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_68VanatoreNoapte",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Potez_63_11_A3_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Recon",
                        "Texture_STRATEGIC_Plane_Recon",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = True
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_68VanatoreNoapte'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Blenheim_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((3000) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'Recon'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "OTGOVJJTHS"),
                     (~/LocalisationConstantes/dico_unites, "ZLLGLXHGQA"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_68VanatoreNoapte'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_Grup16Vanatore is TEntityDescriptor
(
    DescriptorId       = GUID:{803e6a18-e454-451f-8dc0-f4e6db7470bc}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_Grup16Vanatore'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_Grup16Vanatore",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_81_C_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_Grup16Vanatore'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_81_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "GUSBKLVPPJ"),
                     (~/LocalisationConstantes/dico_unites, "IPDAVDGRVZ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_Grup16Vanatore'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_Grup2Vanatore is TEntityDescriptor
(
    DescriptorId       = GUID:{68a94c21-4f34-4343-a224-923505273ca7}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_Grup2Vanatore'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_Grup2Vanatore",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IAR_81_C_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_Grup2Vanatore'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IAR_81_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NEECCOSFQL"),
                     (~/LocalisationConstantes/dico_unites, "ILCJMAWTNO"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_Grup2Vanatore'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_Grup5Bomb is TEntityDescriptor
(
    DescriptorId       = GUID:{52821ff7-b407-4cd7-bf05-1612570bac2b}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_Grup5Bomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_Grup5Bomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_88_A4_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_Grup5Bomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_88_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "CJTYNTLDSR"),
                     (~/LocalisationConstantes/dico_unites, "WFBNCSIBOJ"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_Grup5Bomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_Grup63Bomb is TEntityDescriptor
(
    DescriptorId       = GUID:{47a3deb7-00ef-4f3b-a0ba-6cef194208a9}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_Grup63Bomb'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/MBT
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/MBT
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_Grup63Bomb",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Ju_87D_5_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Bomber",
                        "Texture_STRATEGIC_Plane_Bomber",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = True
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_Grup63Bomb'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Ju_87_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // StrategicBomber
        TStrategicBomberModuleDescriptor
        (
            APPenalty = 4.0
            MaxDistance = 0.0 * Metre
            Origin = ~/BomberOrigin/Aerial
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'MBT'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "TPEYJIOLEJ"),
                     (~/LocalisationConstantes/dico_unites, "UPKBHBPCMS"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_Grup63Bomb'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_Grup79Vanatore is TEntityDescriptor
(
    DescriptorId       = GUID:{da82dbae-a614-4e73-afde-e53f1fdfa4f7}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_Grup79Vanatore'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_Grup79Vanatore",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Me_109_G6_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_Grup79Vanatore'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Me_109_F_ROU'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "BZWZHORWIV"),
                     (~/LocalisationConstantes/dico_unites, "FPONVJVTNS"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_Grup79Vanatore'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_ROU2_ARR_Grup8Asalt is TEntityDescriptor
(
    DescriptorId       = GUID:{1df0bf92-2279-4f1b-a99c-55ed84489bcb}
    ClassNameForDebug  = 'Pawn_T_Pion_ROU2_ARR_Grup8Asalt'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_ROU2_ARR_Grup8Asalt",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Hs_129_B2_ROU
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_ROU2_ARR_Grup8Asalt'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Hs_129_GER'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NGIUVPAVKE"),
                     (~/LocalisationConstantes/dico_unites, "UTTTEKBLIB"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_ROU2_ARR_Grup8Asalt'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_SOV_VVS_122_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{5ccb1abb-7848-4c2e-9b1c-b85fa3d1c876}
    ClassNameForDebug  = 'Pawn_T_Pion_SOV_VVS_122_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_SOV_VVS_122_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9B_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_SOV_VVS_122_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "IWOAWNEUBS"),
                     (~/LocalisationConstantes/dico_unites, "TIECIHFWBF"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_SOV_VVS_122_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_SOV_VVS_179_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{db487db8-6272-4e88-963e-f755fc99b73d}
    ClassNameForDebug  = 'Pawn_T_Pion_SOV_VVS_179_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_SOV_VVS_179_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9B_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_SOV_VVS_179_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "VLKFYTFKTV"),
                     (~/LocalisationConstantes/dico_unites, "MQSDSOSUJD"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_SOV_VVS_179_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_SOV_VVS_513_IAP is TEntityDescriptor
(
    DescriptorId       = GUID:{623f1323-1e54-493a-a49a-acaf5b4a0998}
    ClassNameForDebug  = 'Pawn_T_Pion_SOV_VVS_513_IAP'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_SOV_VVS_513_IAP",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_Yak_9B_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Fighter",
                        "Texture_STRATEGIC_Plane_Fighter",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = True
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_SOV_VVS_513_IAP'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_Yak_9_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 4000.0 * Metre
                AirDenyRange = -1.0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'AirSup'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "NWPBVKQHRZ"),
                     (~/LocalisationConstantes/dico_unites, "CSMCASSQHK"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_SOV_VVS_513_IAP'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_SOV_VVS_90_ShaPG is TEntityDescriptor
(
    DescriptorId       = GUID:{9d2256b0-6747-44be-9e12-c60810708c46}
    ClassNameForDebug  = 'Pawn_T_Pion_SOV_VVS_90_ShaPG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_SOV_VVS_90_ShaPG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_SOV_VVS_90_ShaPG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "ODQYKQIOEH"),
                     (~/LocalisationConstantes/dico_unites, "JAXEITNKTS"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_SOV_VVS_90_ShaPG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_SOV_VVS_91_ShaPG is TEntityDescriptor
(
    DescriptorId       = GUID:{83441935-bca6-4502-bb98-994efddc5d1d}
    ClassNameForDebug  = 'Pawn_T_Pion_SOV_VVS_91_ShaPG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_SOV_VVS_91_ShaPG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_SOV_VVS_91_ShaPG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "WRQIFXQSFP"),
                     (~/LocalisationConstantes/dico_unites, "EADTJMZIHA"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_SOV_VVS_91_ShaPG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
export Descriptor_Unit_T_Pion_SOV_VVS_92_ShaPG is TEntityDescriptor
(
    DescriptorId       = GUID:{2c8c6f63-f7b5-4f2e-88e5-db3cd4f71727}
    ClassNameForDebug  = 'Pawn_T_Pion_SOV_VVS_92_ShaPG'
    Modules            = [
        // TypeUnit
            TModuleSelector
            (
                Default            = TTypeUnitModuleDescriptor
                (
                    TypeUnitValue                    = ETypeUnit/Undef
                    Nationalite                      = ENationalite/Allied
                    MotherCountry                    = 'SOV'
                    AcknowUnitType                   = ~/TAcknowUnitType_Tank
                    TypeUnitFormation                = 'Char'
                )
                Selection = [
                    NilDescriptorIfCadavre,
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer
                        (
                            ParamId=~/Parameter_ModuleCreationSelectionFilter
                            ParamValue=~/ModuleCreationFilter_Ghost
                        )
                        Descriptor = TTypeUnitModuleDescriptor
                        (
                            MotherCountry                    = 'SOV'
                            Nationalite                      = ENationalite/Allied
                            TypeUnitValue                    = ETypeUnit/Undef
                        )
                    )
                ]
            ),

        // Flags
            TFlagsModuleDescriptor
            (
                InitialFlagSet =
                [
                    Flag_Detectable,
                    Flag_LdDetectable,
                    Flag_Avion,
                    Flag_Highlightable,
                    Flag_Selectionnable,
                    Flag_Target,
                    Flag_HighAltitudeFlying,
                    Flag_DetectableLowAltitude,
                    Flag_Blessable,
                    Flag_DEPRECATED_NePasUtiliser_OnlyForBriquePython_UniteDeCommandement,
                ]
            ),

        // Position
            TModuleSelector
            (
                Default        = TPositionModuleDescriptor
                (
                    StickToGround              = True
                    InGeoDb                    = True
                    PorteurMustBeVisible       = True
                    MustUpdateZoneIndice       = True
                    ClampInWorld               = False
                    ClampOutMap                = True
                    HasNearlyNullBBox          = False
                    GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                    Radius                     = ((30) * Metre)
                    RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                    CameraFollower             = GfxDescriptorCameraFollower_Pawn
                    LowAltitudeFlyingAltitude  = ((0) * Metre)
                    NearGroundFlyingAltitude   = ((0) * Metre)
                )
                Selection = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Cadavre)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolante
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TPositionModuleDescriptor
                        (
                            StickToGround              = True
                            InGeoDb                    = False
                            PorteurMustBeVisible       = True
                            MustUpdateZoneIndice       = True
                            ClampInWorld               = False
                            ClampOutMap                = True
                            HasNearlyNullBBox          = False
                            GfxDescriptorPorteur       = ~/GfxPorteurUniteVolanteGhost
                            Radius                     = ((30) * Metre)
                            RelativeScanningPosition   = ~/DecalageParDefautDuPointDeVision
                            CameraFollower             = nil
                            LowAltitudeFlyingAltitude  = ((0) * Metre)
                            NearGroundFlyingAltitude   = ((0) * Metre)
                        )
                    ),
                ]
            ),

        // LinkTeam
            ~/LinkTeamModuleDescriptor,

        // Tags
            TTagsModuleDescriptor
            (
                TagSet = [
                    "AllUnits",
                    "Unite",
                    "UNITE_T_Pion_SOV_VVS_92_ShaPG",
                ]
            ),

        // ApparenceModel
            TApparenceModelModuleDescriptor
            (
                AllowMissingGameplayBBoxBone = False
                Scale                              = 1.5
                PickableObject                     = True
                Depiction                          = ~/Gfx_IL_2M_SOV
                GameplayBBoxBoneName               = ''
                IsBaseOnModelCenter                = True

                IsPawn                             = True
                ForcedRenderStyles = [ ~/RenderStatePawn ]
                DepictionTransformer = StrategicAerialDepictionTransformer(Scale = 1.5)
                ShaderParams = [
                    TApparenceModelShaderParameter(
                        Key = "Metallic"
                        ValueFloat = 1.000
                    ),
                    TApparenceModelShaderParameter(
                        Key = "Roughness"
                        ValueFloat = 0.600
                    ),
                    TApparenceModelShaderParameter(
                        Key = "BaseColor"
                        ValueFloat3 = [ 0.560, 0.570, 0.580 ]
                    ),
                ]
            )
            ,

        // GhostModule
            TModuleSelector
            (
                Default        = nil
                Selection      = [
                    TModuleSelectorFilter
                    (
                        Condition  = TModuleSelectorCondition_ParamEquals_Integer(ParamId=~/Parameter_ModuleCreationSelectionFilter  ParamValue=~/ModuleCreationFilter_Ghost)
                        Descriptor = TGhostModuleDescriptor
                        (
                            TerrainsAndColorsForPlacementGhostFeedback = [
                            ]
                        )
                    )
                ]
            ),

        // StateEngine
            TModuleSelector
            (
                Default        = TStateEngineModuleDescriptor
                (
                    InitialStateId = 'UnitIdle'
                    StateEngineUpdateMode = WorldControllerAccess_InWorld
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // Debug
            ~/DebugModuleDescriptor,

        // Selection
            TModuleSelector
            (
                Default            = TSelectionModuleDescriptor
                (
                    IsSelectable       = True
                    IsHighlightable    = True
                    HasSelectionShader = False
                    HasHighlightShader = True
                    MultipleSelectionFilterPriorityDefault      = 0
                    MultipleSelectionFilterPrioritySecondary    = 0
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // EffectApplier
            ~/EffectApplierModuleSelector,

        // Label
            TStrategicLabelModuleDescriptor
            (
                BackgroundTexture = TBUCKToolAlternativeValues_TUIValueTextureNameFromTEugBMutableInteger
                (
                    CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicIconType
                    Alterator = $/GUIOption/StrategicIconType
                    Values =
                    [
                        "Texture_STRATEGIC_RTS_H_Plane_Ground_Support",
                        "Texture_STRATEGIC_Plane_Ground_Support",
                    ]
                )
            ),

        // Orderable
            TModuleSelector
            (
                Default                   = TOrderableModuleDescriptor
                (
                    CanHoldPosition           = False
                    CanMove                   = False
                    CanBeHarvested            = False
                    CanHarvest                = False
                    CanChangeTransferTarget   = False
                    CanSell                   = False
                    CanBuild                  = False
                    CanAttack                 = False
                    CanStop                   = True
                    CanFollowFormation        = True
                    CanShoot                  = False
                    CanMerge                  = False
                    CanUnloadFromTransport    = False
                    CanLand                   = False
                    CanGoUp                   = False
                    CanGoDown                 = False
                    CanMoveAndAttack          = False
                    CanSpread                 = False
                    CanReverse                = False
                    CanSupplyUnit             = False
                    CanAskForSupply           = False
                    CanGoGetSupply            = False
                    CanEnterDistrict          = False
                    CanAirplanePatrol         = False
                    CanAirplaneAttack         = True
                    CanLoadIntoTransport      = True
                    CanLoadUnit               = False
                    CanAirplaneTakeOff        = True
                    CanAirplaneEvacuate       = True
                    CanRefuelAirplane         = True
                    CanRepairAirplane         = True
                    CanRearmAirplane          = True
                    CanAirplaneShoot          = True
                    CanBombard                = False
                    CanFortify                = False
                    CanFortifyAntiAir         = False
                    CanAIDefend               = True
                    CanAIAiplaneAutoManage    = False
                    CanAIAttack               = True
                    CanAIManageArtillery      = False
                    CanAIStop                 = True
                    CanSmartHoldFire          = False
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // OrderDisplay
            ~/OrderDisplayModuleSelector,

        // PackSignaux
            ~/PackSignauxModuleSelector,

        // Deck
            TModuleSelector
            (
                Default        = TDeckModuleDescriptor
                (
                    DeckIdentifier = 'T_Pion_SOV_VVS_92_ShaPG'
                    RegimentName = 'None'
                    PictureForSelection = 'Texture_PawnPicture_IL_2M_SOV'
                    DeckType = 0
                    MaxPackCount = 12
                )
                Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
            ),

        // StrategicBattle
        TModuleSelector
        (
            Default = TStrategicBattleModuleDescriptor
            (
                CanEngageBattle = False
                CanBeInitialTarget = False
                HasZoneOfControl = False
                AirDenyRadius = 0 * Metre
                AirDenyRange = 0 * Metre
                LandDenyRadius = 0 * Metre
                LandDenyRange = 0 * Metre
                BattleSupportRadius = -1.0 * Metre
                MinBattleSupportRadius = 0.0 * Metre
                PhaseAPCost = $/GFX/Everything/PhaseToAPCostForPlane

                BombingMalusTraitList =
                [
                    ~/Descriptor_Trait_Bombed_Unit,
                ]
            )
            Selection = [ ~/NilDescriptorIfGhostOrCadavre ]
        ),

        // Visibility
            TModuleSelector
            (
                Default        = TVisibilityModuleDescriptor
                (
                    AutoRevealType       = EAutoRevealType/AutoRevealAllies
                    UnitConcealmentBonus = 1.0
                    VisionUnitType       = EVisionUnitType/Undefined
                    AlwaysComputeLoS     = False
                    UnitIsStealth        = False
                    HideFromDebug        = False
                    VisionObstructionType = EVisionObstructionType/Air
                    GroundDissimulationModifierType = EGroundDissumulationModifierType/Air
                )
                Selection = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ScannerConfiguration
            TModuleSelector
            (
                Default        = TScannerConfigurationDescriptor
                (
                    OpticsAltitudeConfig = ~/EVisionOpticsAltitudeConfig/UseOnRS_TBAWithGroundOpticsLerp
                    DoesNotCountInScannerAbsoluteMaxRange = False
                    PorteeVisionTBA = ((0.0) * Metre)
                    PorteeVisionFOW = ((0.0) * Metre)
                    DetectionTBA = ((14000) * Metre)
                    PorteeVision = ((8000) * Metre)
                    PorteeIdentification = 0.0
                    OpticalStrength = 120
                    OpticalStrengthAltitude = 60
                    UnitDetectStealthUnit = False
                    SpecializedDetections = MAP [
                        ( EVisionUnitType/AlwaysInHighAltitude, 16000.0 * Metre ),
                    ]
                    SpecializedOpticalStrengths = MAP [
                    ]
                    IgnoreObstacles = MAP []
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // RemoteScanning
            TModuleSelector
            (
                Default        = TRemoteScanningModuleDescriptor
                (
                    ScanningRange = ((0.0) * Metre)
                )
                Selection = [ ~/NilDescriptorIfCadavre ]
            ),

        // Scanner
            TModuleSelector
            (
                Default        = TReverseScannerWithIdentificationDescriptor
                (
                    VisibilityRollRule = TModernWarfareVisibilityRollRule
                    (
                        IdentifyBaseProbability     = 0.1
                        TimeBetweenEachIdentifyRoll = 20.0
                        VisibilityRuleDescriptor    = ~/StandardWargameVisibilityRollRule
                        DistanceMultiplierRule      = TModernWarfareDistanceMultiplierRollRuleDescriptor
                        (
                            MultiplicateurAPorteeMaximale            = DefaultMultiplicateurAPorteeMaximale
                            MultiplicateurAPorteeMinimale            = DefaultMultiplicateurAPorteeMinimale
                            Exposant                                 = DefaultExposant
                            MultiplicateurAPorteeMaximaleEnMouvement = DefaultMultiplicateurAPorteeMaximaleEnMouvement
                            MultiplicateurAPorteeMinimaleEnMouvement = DefaultMultiplicateurAPorteeMinimaleEnMouvement
                            ExposantEnMouvement                      = DefaultExposantEnMouvement
                        )
                    )
                )
                Selection      = [~/NilDescriptorIfGhostOrCadavre]
            ),

        // ActionPoints
        TActionPointsModuleDescriptor
        (
            InitialActionPoint = 3
            ActionPointRecoveryPerTurn = 3
            NbInitialActionsPointsForProducedPawn = 1
        ),

        // StrategicMovementLink
        $/GFX/Everything/StrategicMovementDescriptor_aerial,

        // StrategicAerial
        TStrategicAerialModuleDescriptor
        (
        ),

        // CubeAction
            TModuleSelector
            (
                Default        = TCubeActionModuleDescriptor
                (
                    CubeActionDescriptor = ~/CubeAction_Menu_Ordres_Pawn
                )
                Selection      = [
                    ~/NilDescriptorIfCadavre
                ]
            ),

        // PawnUI
        TPawnUIModuleDescriptor
        (
            HintToken = 'GAA'
            NameToken = TBUCKToolAlternativeValues_TLocalisationStringTokenFromTEugBMutableBoolean
             (
                 CommandNameTrigger = ~/SpecificCommandName/UpdateGUIFromStrategicPawnName
                 Alterator = $/GUIOption/StrategicPawnName
                 Values =
                 [
                     (~/LocalisationConstantes/dico_unites, "EIMRQIKCXY"),
                     (~/LocalisationConstantes/dico_unites, "OCZKMSSGKD"),
                 ]
             )
            ProdMenuTexture = 'Texture_Button_Pawn_T_Pion_SOV_VVS_92_ShaPG'
            CountryTexture = 'CommonTexture_MotherCountryFlag_SOV'
        ),

        // Cosmetic
        TCosmeticModuleDescriptor
        (
            FxByActionList = MAP
            [
            ]
            SoundByActionList = MAP
            [
            ]
        ),

        // IAMacroOrder
        ~/IAMacroOrderModuleDescriptor,

        // StrategicPosition
        TStrategicPositionModuleDescriptor
        (
            PositionDescriptorList = [
                TStrategicPositionDescriptor
                (
                    RelativePosition = [0,0]
                    Layer = ~/EStrategicLayer/StrategicLayerAir
                ),
            ]
        ),

        // StrategicSequence
        TStrategicSequenceModuleDescriptor
        (
        ),

    ]
)
