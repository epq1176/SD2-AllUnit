//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- //
//                  Boutons HUD (SD2)                   //
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- //

DefaultButtonHUDDims is [170.0, 24.0]

template BUCKSpecificButton
[
    ElementName : string = '',
    UniqueName : string = '',

    Ombre : bool = false,

    ButtonRelativeWidthHeight : float2 = [0,0],
    ButtonMagnifiableWidthHeight : float2 = DefaultButtonHUDDims,
    ButtonMagnifiableOffset : float2 = [0,0],
    ButtonAlignementToAnchor : float2 = [0,0],
    ButtonAlignementToFather : float2 = [0,0],

    HasBigBorder : bool = true,
    BigBorderBackgroundColorToken : string = "ButtonHUD/BigBorder",

    HasBorder : bool = true,
    BorderLineColorToken : string = "ButtonHUD/Border",
    BackgroundBlockColorToken : string = "ButtonHUD/Background",

    HasExternalBorder : bool = true,
    ExternalBorderLineColorToken : string = "ButtonHUD/ExternalBorder",

    FitStyle : int = ~/ContainerFitStyle/None,

    Components : LIST<TBUCKContainerDescriptor> = [],

    AllowMultipleInputsPerFrame : bool = false,

    Grayed : bool = false,
    IsFocusable : bool = false,
    IsTogglable : bool = false,
    CannotDeselect : bool = false,
    HidePointerEvents : bool = false,
    MaskEvents : bool = true,

    RadioButtonManager : TBUCKRadioButtonManager = nil,

    HasText : bool = false,
    TextColorToken : string = "ButtonHUD/Text",
    TextComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] MagnifiableWidthHeight = [-6.0, 0.0] AlignementToFather = [0.5, 0.5] AlignementToAnchor = [0.5, 0.5] ),
    TextParagraphStyle : TParagraphStyleRTTI = ~/paragraphStyleTextCenter,
    TextPadding : TRTTILength4 = TRTTILength4(),
    TextSizeToken : string = "12",
    TextStyle : string = "Default",
    TextToken : string = '',
    TextTypefaceToken : string = "Main",
    TextDico : string = ~/LocalisationConstantes/dico_interface_ingame,
    TextElementName : string = "TextElement",
    OverrideTextElementName : bool = false,

    HintTitleToken : string = "",
    HintBodyToken : string = "",
    HintExtendedToken : string = "",
    HintDico : string = ~/LocalisationConstantes/dico_interface_ingame,
    HintableAreaElementName : string = "",
    UseInGameHintStyle : bool = true,

    UniformDrawer : TUIUniformDrawer = $/UserInterface/UIUniformDrawer,

    HoverSound : TSoundDescriptor = nil,
    ClickSound : TSoundDescriptor = nil,

    Mapping : TEugBMutablePBaseClass = nil,
    RequiredTags : LIST<string> = [],
    ForbiddenTags : LIST<string> = [],

    BorderColorTokenBySide : LIST<PAIR<int, string>> = [],

    ForegroundTexture : string = "",

    UseLocalRenderLayer : bool = false,
    BackgroundLocalRenderLayer : int = 0,
    BackgroundTextureLocalRenderLayer : int = 0,
    TextLocalRenderLayer : int = 0,
    BorderLocalRenderLayer : int = 0,
    ForegroundLocalRenderLayer : int = 0,

    SpotlightComponent : TBUCKContainerDescriptor = SpotlightDescriptor(),

    HasBackgroundTexture : bool = false,
    BackgroundTexture : string = "",
    BackgroundTextureFrameProperty : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1, 1] ),
]
is BUCKButtonDescriptor
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = <ButtonRelativeWidthHeight>
        MagnifiableWidthHeight = <ButtonMagnifiableWidthHeight>
        MagnifiableOffset = <ButtonMagnifiableOffset>
        AlignementToAnchor = <ButtonAlignementToAnchor>
        AlignementToFather = <ButtonAlignementToFather>
    )

    // Hint
    hintComponent is <UseInGameHintStyle> ?
    BUCKSpecificHintableArea
    (
        ElementName = <HintableAreaElementName>
        DicoToken = <HintDico>
        HintTitleToken = <HintTitleToken>
        HintBodyToken = <HintBodyToken>
        HintExtendedToken = <HintExtendedToken>
    ) : BUCKSpecificHintableArea
    (
        ElementName = <HintableAreaElementName>
        DicoToken = <HintDico>
        HintTitleToken = <HintTitleToken>
        HintBodyToken = <HintBodyToken>
        HintExtendedToken = <HintExtendedToken>
    )

    FitStyle = <FitStyle>

    RequiredTags = <RequiredTags>
    ForbiddenTags = <ForbiddenTags>
    IsFocusable = <IsFocusable>

    AllowMultipleInputsPerFrame = <AllowMultipleInputsPerFrame>
    Grayed = <Grayed>
    IsTogglable = <IsTogglable>
    CannotDeselect = <CannotDeselect>
    HidePointerEvents = <HidePointerEvents>
    MaskEvents = <MaskEvents>

    RadioButtonManager = <RadioButtonManager>

    Mapping = <Mapping>

    UniformDrawer = <UniformDrawer>

    HoverSound = <HoverSound>
    ClickSound = <ClickSound>

    HasBackground = true
    BackgroundBlockColorToken = <BackgroundBlockColorToken>

    HasBorder = <HasBorder>
    BorderLineColorToken = <BorderLineColorToken>
    BorderThicknessToken = "1"

    UseLocalRenderLayer = <UseLocalRenderLayer>
    BackgroundLocalRenderLayer = <BackgroundLocalRenderLayer>
    BorderLocalRenderLayer = <BorderLocalRenderLayer>

    SpotlightComponent = <SpotlightComponent>

    Components =
    (<HasExternalBorder> ?
    [
        BUCKContainerDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 1.0]
                PixelWidthHeight = [4.0, 4.0]
                AlignementToAnchor = [0.5, 0.5]
                AlignementToFather = [0.5, 0.5]
            )

            HasBorder = true
            BorderLineColorToken = <ExternalBorderLineColorToken>
            BorderThicknessToken = "1"
        ),
    ] : []) +

    (<HasBackgroundTexture> | <BackgroundTexture> != "" ?
    [
        BUCKTextureDescriptor
        (
            ComponentFrame = <BackgroundTextureFrameProperty>

            UseLocalRenderLayer = <UseLocalRenderLayer>
            LocalRenderLayer = <BackgroundTextureLocalRenderLayer>

            TextureToken = <BackgroundTexture>
            TextureFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1, 1]
            )
        ),
    ] : []) +

    (<HasText> | <TextToken> != "" ?
    [
        BUCKTextDescriptor
        (
            ElementName = (<OverrideTextElementName> ? <TextElementName> : <ElementName> + <TextElementName>)

            ComponentFrame = <TextComponentFrame>

            ParagraphStyle = <TextParagraphStyle>
            TextStyle = <TextStyle>
            TextPadding = <TextPadding>
            TypefaceToken = <TextTypefaceToken>
            UniformDrawer = $/UserInterface/UIUniformDrawer

            UseLocalRenderLayer = <UseLocalRenderLayer>
            LocalRenderLayer = <TextLocalRenderLayer>

            TextToken = <TextToken>
            TextDico = <TextDico>

            TextColor = <TextColorToken>
            TextSize = <TextSizeToken>
        )
    ] : []) + <Components> +

    (<ForegroundTexture> != "" ?
    [
        BUCKTextureDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
               RelativeWidthHeight = [1.0, 1.0]
            )

            UseLocalRenderLayer = <UseLocalRenderLayer>
            LocalRenderLayer = <ForegroundLocalRenderLayer>

            TextureToken = <ForegroundTexture>
            TextureFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1, 1]
            )
        )
    ] : []) +

    (<Ombre> == true ?
    [
        SmallOmbrePanel
    ] : []) +

    (<HasBigBorder> ?
    [
        // Big Border
        BUCKContainerDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [0.0, 1.0]
                PixelWidthHeight = [3.0, 0.0]
                PixelOffset = [1.0, 0.0]
                AlignementToAnchor = [0.0, 0.5]
                AlignementToFather = [0.0, 0.5]
            )

            HasBackground = true
            BackgroundBlockColorToken = <BigBorderBackgroundColorToken>

            UseLocalRenderLayer = <UseLocalRenderLayer>
            BackgroundLocalRenderLayer = <BorderLocalRenderLayer>
        ),
    ] : []) +

    (<HintTitleToken> != "" | <HintBodyToken> != "" | <HintExtendedToken> != "" | <HintableAreaElementName> != "" ?
    [
        hintComponent,
    ] : [])
)

//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- //
//                   Boutons d'Action                   //
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- //

DefaultButtonHeight is 24.0
DefaultButtonDims is [ 170.0, DefaultButtonHeight ]
DefaultImageButtonDims is [ 24.0, DefaultButtonHeight ]

template StandardButton
[
    ElementName : string = '',
    UniqueName : string = '',

    ButtonMagnifiableWidthHeight : float2 = DefaultButtonDims,
    ButtonMagnifiableOffset : float2 = [0,0],
    ButtonAlignementToAnchor : float2 = [0,0],
    ButtonAlignementToFather : float2 = [0,0],

    Components : LIST<TBUCKContainerDescriptor> = [],

    AllowMultipleInputsPerFrame : bool = false,

    Grayed : bool = false,
    IsFocusable : bool = false,
    IsTogglable : bool = false,
    HidePointerEvents : bool = false,
    MaskEvents : bool = true,

    RadioButtonManager : TBUCKRadioButtonManager = nil,

    HasText : bool = true,
    // TextColorToken : string = "ButtonHUD",
    TextComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] AlignementToFather = [0.5, 0.5] AlignementToAnchor = [0.5, 0.5] ),
    TextParagraphStyle : TParagraphStyleRTTI = ~/paragraphStyleTextCenter,
    TextSizeToken : string = "12",
    TextStyle : string = "Default",
    TextToken : string = '',
    TextTypefaceToken : string = "Main",
    TextDico : string = ~/LocalisationConstantes/dico_interface_outgame,

    HintTitleToken : string = "",
    HintBodyToken : string = "",
    HintExtendedToken : string = "",
    HintDico : string = ~/LocalisationConstantes/dico_interface_outgame,
    HintableAreaElementName : string = "",
    UseInGameHintStyle : bool = true,

    UniformDrawer : TUIUniformDrawer = $/UserInterface/UIUniformDrawer,

    HoverSound : TSoundDescriptor = nil,
    ClickSound : TSoundDescriptor = nil,

    Mapping : TEugBMutablePBaseClass = nil,
    RequiredTags : LIST<string> = [],
    ForbiddenTags : LIST<string> = [],

    BorderColorTokenBySide : LIST<PAIR<int, string>> = [],

    ForegroundTexture : string = "",

    UseLocalRenderLayer : bool = false,
    BackgroundLocalRenderLayer : int = 0,
    BackgroundTextureLocalRenderLayer : int = 0,
    TextLocalRenderLayer : int = 0,
    BorderLocalRenderLayer : int = 0,
    ForegroundLocalRenderLayer: int = 0,

    //SpotlightComponent : TBUCKContainerDescriptor = SpotlightDescriptor(),
]
is BUCKSpecificButton
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>

    ButtonMagnifiableWidthHeight = <ButtonMagnifiableWidthHeight>
    ButtonMagnifiableOffset = <ButtonMagnifiableOffset>
    ButtonAlignementToAnchor = <ButtonAlignementToAnchor>
    ButtonAlignementToFather = <ButtonAlignementToFather>

    Components = <Components>

    Grayed = <Grayed>
    IsFocusable = <IsFocusable>
    IsTogglable = <IsTogglable>
    HidePointerEvents = <HidePointerEvents>
    MaskEvents = <MaskEvents>

    RadioButtonManager = <RadioButtonManager>

    HasText = <HasText>
    // TextColorToken = <TextColorToken>
    TextComponentFrame = <TextComponentFrame>
    TextParagraphStyle = <TextParagraphStyle>
    TextSizeToken = <TextSizeToken>
    TextStyle = <TextStyle>
    TextToken = <TextToken>
    TextTypefaceToken = <TextTypefaceToken>
    TextDico = <TextDico>

    HintTitleToken = <HintTitleToken>
    HintBodyToken = <HintBodyToken>
    HintExtendedToken = <HintExtendedToken>
    HintDico = <HintDico>
    HintableAreaElementName = <HintableAreaElementName>
    UseInGameHintStyle = <UseInGameHintStyle>

    HoverSound = <HoverSound>
    ClickSound = <ClickSound>

    Mapping = <Mapping>
    RequiredTags = <RequiredTags>
    ForbiddenTags = <ForbiddenTags>

    // HasBorder = <HasBorder>
    // InternalBorderLineColorToken = <InternalBorderLineColorToken>
    // ExternalBorderLineColorToken = <ExternalBorderLineColorToken>
    // BorderThickness = <BorderThickness>

    // HasBackground = <HasBackground>
    // MainBackgroundColorToken = <MainBackgroundColorToken>
    // SecondBackgroundColorToken = <SecondBackgroundColorToken>

    BorderColorTokenBySide = <BorderColorTokenBySide>

    ForegroundTexture = <ForegroundTexture>

    UseLocalRenderLayer = <UseLocalRenderLayer>
    BackgroundLocalRenderLayer = <BackgroundLocalRenderLayer>
    BackgroundTextureLocalRenderLayer = <BackgroundTextureLocalRenderLayer>
    TextLocalRenderLayer = <TextLocalRenderLayer>
    BorderLocalRenderLayer = <BorderLocalRenderLayer>
    ForegroundLocalRenderLayer = <ForegroundLocalRenderLayer>

    //SpotlightComponent = <SpotlightComponent>
)

//---------------------------------------------------
// Confirm Button
//---------------------------------------------------

template ConfirmButton
[
    ElementName : string = '',
    UniqueName : string = '',

    ButtonMagnifiableWidthHeight : float2 = DefaultButtonDims,
    ButtonMagnifiableOffset : float2 = [0,0],
    ButtonAlignementToAnchor : float2 = [0,0],
    ButtonAlignementToFather : float2 = [0,0],

    BigBorderBackgroundColorToken : string = "ConfirmButton/BigBorder",
    BorderLineColorToken : string = "ConfirmButton/Border",
    BackgroundBlockColorToken : string = "ConfirmButton/Background",

    ExternalBorderLineColorToken : string = "ConfirmButton/ExternalBorder",

    Components : LIST<TBUCKContainerDescriptor> = [],

    AllowMultipleInputsPerFrame : bool = false,

    Grayed : bool = false,
    IsFocusable : bool = false,
    IsTogglable : bool = false,
    HidePointerEvents : bool = false,
    MaskEvents : bool = true,

    HasText : bool = true,
    TextColorToken : string = "ConfirmButton/BigBorder",
    TextComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] AlignementToFather = [0.5, 0.5] AlignementToAnchor = [0.5, 0.5] ),
    TextParagraphStyle : TParagraphStyleRTTI = ~/paragraphStyleTextCenter,
    TextSizeToken : string = "12",
    TextStyle : string = "Default",
    TextToken : string = '',
    TextTypefaceToken : string = "Main",
    TextDico : string = ~/LocalisationConstantes/dico_interface_outgame,
    OverrideTextElementName : bool = false,
    TextElementName : string = "TextElement",

    HintTitleToken : string = "",
    HintBodyToken : string = "",
    HintExtendedToken : string = "",
    HintDico : string = ~/LocalisationConstantes/dico_interface_outgame,
    HintableAreaElementName : string = "",
    UseInGameHintStyle : bool = true,

    UniformDrawer : TUIUniformDrawer = $/UserInterface/UIUniformDrawer,

    HoverSound : TSoundDescriptor = nil,
    ClickSound : TSoundDescriptor = nil,

    Mapping : TEugBMutablePBaseClass = nil, //TEugBMutablePBaseClass( Value = TUserInputMapping( KeyboardEventID = UserInputKeyboard/KEY_ENTER ) ),
    RequiredTags : LIST<string> = [],
    ForbiddenTags : LIST<string> = [],

    // HasBorder : bool = true,
    // InternalBorderLineColorToken : string = "ButtonHUD/InternalBorder",
    // ExternalBorderLineColorToken : string = "ButtonHUD/ExternalBorder",
    // BorderThickness : string = "2",

    // HasBackground : bool = true,
    // MainBackgroundColorToken : string = "ButtonHUD/Main",
    // SecondBackgroundColorToken : string = "ButtonHUD/Second",

    BorderColorTokenBySide : LIST<PAIR<int, string>> = [],

    ForegroundTexture : string = "",

    UseLocalRenderLayer : bool = false,
    BackgroundLocalRenderLayer : int = 0,
    BackgroundTextureLocalRenderLayer : int = 0,
    TextLocalRenderLayer : int = 0,
    BorderLocalRenderLayer : int = 0,
    ForegroundLocalRenderLayer : int = 0,

    //SpotlightComponent : TBUCKContainerDescriptor = SpotlightDescriptor(),
]
is BUCKSpecificButton
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>

    ButtonMagnifiableWidthHeight = <ButtonMagnifiableWidthHeight>
    ButtonMagnifiableOffset = <ButtonMagnifiableOffset>
    ButtonAlignementToAnchor = <ButtonAlignementToAnchor>
    ButtonAlignementToFather = <ButtonAlignementToFather>

    BigBorderBackgroundColorToken = <BigBorderBackgroundColorToken>
    BorderLineColorToken = <BorderLineColorToken>
    BackgroundBlockColorToken = <BackgroundBlockColorToken>

    ExternalBorderLineColorToken = <ExternalBorderLineColorToken>

    Components = <Components>

    Grayed = <Grayed>
    IsFocusable = <IsFocusable>
    IsTogglable = <IsTogglable>
    HidePointerEvents = <HidePointerEvents>
    MaskEvents = <MaskEvents>

    HasText = <HasText>
    TextColorToken = <TextColorToken>
    TextComponentFrame = <TextComponentFrame>
    TextParagraphStyle = <TextParagraphStyle>
    TextSizeToken = <TextSizeToken>
    TextStyle = <TextStyle>
    TextToken = <TextToken>
    TextTypefaceToken = <TextTypefaceToken>
    TextDico = <TextDico>
    OverrideTextElementName = <OverrideTextElementName>
    TextElementName = <TextElementName>

    HintTitleToken = <HintTitleToken>
    HintBodyToken = <HintBodyToken>
    HintExtendedToken = <HintExtendedToken>
    HintDico = <HintDico>
    HintableAreaElementName = <HintableAreaElementName>
    UseInGameHintStyle = <UseInGameHintStyle>

    HoverSound = <HoverSound>
    ClickSound = <ClickSound>

    Mapping = <Mapping>
    RequiredTags = <RequiredTags>
    ForbiddenTags = <ForbiddenTags>

    // HasBorder = <HasBorder>
    // InternalBorderLineColorToken = <InternalBorderLineColorToken>
    // ExternalBorderLineColorToken = <ExternalBorderLineColorToken>
    // BorderThickness = <BorderThickness>

    // HasBackground = <HasBackground>
    // MainBackgroundColorToken = <MainBackgroundColorToken>
    // SecondBackgroundColorToken = <SecondBackgroundColorToken>

    BorderColorTokenBySide = <BorderColorTokenBySide>

    ForegroundTexture = <ForegroundTexture>

    UseLocalRenderLayer = <UseLocalRenderLayer>
    BackgroundLocalRenderLayer = <BackgroundLocalRenderLayer>
    BackgroundTextureLocalRenderLayer = <BackgroundTextureLocalRenderLayer>
    TextLocalRenderLayer = <TextLocalRenderLayer>
    BorderLocalRenderLayer = <BorderLocalRenderLayer>
    ForegroundLocalRenderLayer = <ForegroundLocalRenderLayer>

    //SpotlightComponent = <SpotlightComponent>
)

//---------------------------------------------------
// Cancel Button
//---------------------------------------------------

template CancelButton
[
    ElementName : string = '',
    UniqueName : string = '',

    ButtonMagnifiableWidthHeight : float2 = DefaultButtonDims,
    ButtonMagnifiableOffset : float2 = [0,0],
    ButtonAlignementToAnchor : float2 = [0,0],
    ButtonAlignementToFather : float2 = [0,0],

    Components : LIST<TBUCKContainerDescriptor> = [],

    AllowMultipleInputsPerFrame : bool = false,

    Grayed : bool = false,
    IsFocusable : bool = false,
    IsTogglable : bool = false,
    HidePointerEvents : bool = false,
    MaskEvents : bool = true,

    HasText : bool = true,
    // TextColorToken : string = "ButtonHUD",
    TextComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] AlignementToFather = [0.5, 0.5] AlignementToAnchor = [0.5, 0.5] ),
    TextParagraphStyle : TParagraphStyleRTTI = ~/paragraphStyleTextCenter,
    TextSizeToken : string = "12",
    TextStyle : string = "Default",
    TextToken : string = '',
    TextTypefaceToken : string = "Main",
    TextDico : string = ~/LocalisationConstantes/dico_interface_outgame,
    OverrideTextElementName : bool = false,
    TextElementName : string = "TextElement",

    HintTitleToken : string = "",
    HintBodyToken : string = "",
    HintExtendedToken : string = "",
    HintDico : string = ~/LocalisationConstantes/dico_interface_outgame,
    HintableAreaElementName : string = "",
    UseInGameHintStyle : bool = true,

    UniformDrawer : TUIUniformDrawer = $/UserInterface/UIUniformDrawer,

    HoverSound : TSoundDescriptor = nil,
    ClickSound : TSoundDescriptor = nil,

    Mapping : TEugBMutablePBaseClass = TEugBMutablePBaseClass( Value = TUserInputMapping( KeyboardEventID = UserInputKeyboard/KEY_ESCAPE ) ),
    RequiredTags : LIST<string> = [],
    ForbiddenTags : LIST<string> = [],

    // HasBorder : bool = true,
    // BorderLineColorToken : string = "ButtonHUD/InternalBorder",
    // InternalBorderLineColorToken : string = "ButtonHUD/InternalBorder",
    // ExternalBorderLineColorToken : string = "ButtonHUD/ExternalBorder",
    // BorderThickness : string = "2",

    // HasBackground : bool = true,
    // MainBackgroundColorToken : string = "ButtonHUD/Main",
    // SecondBackgroundColorToken : string = "ButtonHUD/Second",

    BorderColorTokenBySide : LIST<PAIR<int, string>> = [],

    ForegroundTexture : string = "",

    UseLocalRenderLayer : bool = false,
    BackgroundLocalRenderLayer : int = 0,
    BackgroundTextureLocalRenderLayer : int = 0,
    TextLocalRenderLayer : int = 0,
    BorderLocalRenderLayer : int = 0,
    ForegroundLocalRenderLayer : int = 0,

    //SpotlightComponent : TBUCKContainerDescriptor = SpotlightDescriptor(),
]
is BUCKSpecificButton
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>

    ButtonMagnifiableWidthHeight = <ButtonMagnifiableWidthHeight>
    ButtonMagnifiableOffset = <ButtonMagnifiableOffset>
    ButtonAlignementToAnchor = <ButtonAlignementToAnchor>
    ButtonAlignementToFather = <ButtonAlignementToFather>

    Components = <Components>

    Grayed = <Grayed>
    IsFocusable = <IsFocusable>
    IsTogglable = <IsTogglable>
    HidePointerEvents = <HidePointerEvents>
    MaskEvents = <MaskEvents>

    HasText = <HasText>
    // TextColorToken = <TextColorToken>
    TextComponentFrame = <TextComponentFrame>
    TextParagraphStyle = <TextParagraphStyle>
    TextSizeToken = <TextSizeToken>
    TextStyle = <TextStyle>
    TextToken = <TextToken>
    TextTypefaceToken = <TextTypefaceToken>
    TextDico = <TextDico>
    OverrideTextElementName = <OverrideTextElementName>
    TextElementName = <TextElementName>

    HintTitleToken = <HintTitleToken>
    HintBodyToken = <HintBodyToken>
    HintExtendedToken = <HintExtendedToken>
    HintDico = <HintDico>
    HintableAreaElementName = <HintableAreaElementName>
    UseInGameHintStyle = <UseInGameHintStyle>

    HoverSound = <HoverSound>
    ClickSound = <ClickSound>

    Mapping = <Mapping>
    RequiredTags = <RequiredTags>
    ForbiddenTags = <ForbiddenTags>

    // HasBorder = <HasBorder>
    // InternalBorderLineColorToken = <InternalBorderLineColorToken>
    // ExternalBorderLineColorToken = <ExternalBorderLineColorToken>
    // BorderThickness = <BorderThickness>

    // HasBackground = <HasBackground>
    // MainBackgroundColorToken = <MainBackgroundColorToken>
    // SecondBackgroundColorToken = <SecondBackgroundColorToken>

    BorderColorTokenBySide = <BorderColorTokenBySide>

    ForegroundTexture = <ForegroundTexture>

    UseLocalRenderLayer = <UseLocalRenderLayer>
    BackgroundLocalRenderLayer = <BackgroundLocalRenderLayer>
    BackgroundTextureLocalRenderLayer = <BackgroundTextureLocalRenderLayer>
    TextLocalRenderLayer = <TextLocalRenderLayer>
    BorderLocalRenderLayer = <BorderLocalRenderLayer>
    ForegroundLocalRenderLayer = <ForegroundLocalRenderLayer>

    //SpotlightComponent = <SpotlightComponent>
)

//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- //
//                     Boutons HUD                      //
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- //

// Don't use this template, use BUCKButtonDescriptor or BUCKSpecificButton instead

template HUDButton
[
    ElementName : string = '',
    UniqueName : string = '',

    ComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( MagnifiableWidthHeight = DefaultButtonDims ),

    Components : LIST<TBUCKContainerDescriptor> = [],

    AllowMultipleInputsPerFrame : bool = false,

    Grayed : bool = false,
    IsTogglable : bool = false,
    CannotDeselect : bool = false,
    ForceEvents : bool = false,
    RadioButtonManager : TBUCKRadioButtonManager = nil,
    HidePointerEvents : bool = false,
    MaskEvents : bool = true,

    HasText : bool = false,
    TextColorToken : string = "BoutonHUD",
    TextComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] AlignementToFather = [0.5, 0.5] AlignementToAnchor = [0.5, 0.5] ),
    TextParagraphStyle : TParagraphStyleRTTI = ~/paragraphStyleTextCenter,
    TextSizeToken : string = "BoutonHUD",
    TextStyle : string = "Default",
    TextToken : string = '',
    TextTypefaceToken : string = "Main",
    TextDico : string = ~/LocalisationConstantes/dico_interface_ingame,

    HintTitleToken : string = "HUD_UNKN",
    HintBodyToken : string = "HUD_UNKN",
    HintExtendedToken : string = "HUD_UNKN",
    HintDico : string = ~/LocalisationConstantes/dico_interface_ingame,
    HintableAreaElementName : string = "",
    UseInGameHintStyle : bool = true,

    UniformDrawer : TUIUniformDrawer = $/UserInterface/UIUniformDrawer,

    HoverSound : TSoundDescriptor = nil,
    ClickSound : TSoundDescriptor = nil,

    Mapping : TEugBMutablePBaseClass = nil,

    HasBorder : bool = true,
    BorderLineColorToken : string = "BoutonHUD/BordureExterne/Primaire",
    BorderThickness : string = "BoutonHUD/BordureExterne",

    HasBackground : bool = true,
    BackgroundColorToken : string = "BoutonHUD",

    OverBlockComponentStateLocked : bool = false,
    OverBlockColorToken : string = "",
    OverBlockTexture : string = "",

    BorderColorTokenBySide : LIST<PAIR<int, string>> = [],

    ForegroundTexture : string = "StyleCockpitTexture_HUDButton_Light",

    UseLocalRenderLayer : bool = false,
    BackgroundLocalRenderLayer : int = 0,
    LocalRenderLayer : int = 0,
    OverBlockLocalRenderLayer : int = 0,
    BorderLocalRenderLayer : int = 0,
    ForegroundLocalRenderLayer : int = 0,

    BackgroundTexture : string = "StyleCockpitTexture_HUDButton",
    BackgroundTextureFrameProperty : TUIFramePropertyRTTI = TUIFramePropertyRTTI( RelativeWidthHeight = [1, 1] ),

    SpotlightComponent : TBUCKContainerDescriptor = SpotlightDescriptor(),
]
is BUCKButtonDescriptor
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>
    ComponentFrame = <ComponentFrame>

    // Hint
    hintComponent is <UseInGameHintStyle> ?
    BUCKSpecificHintableArea
    (
        ElementName = <HintableAreaElementName>
        DicoToken = <HintDico>
        HintTitleToken = <HintTitleToken>
        HintBodyToken = <HintBodyToken>
        HintExtendedToken = <HintExtendedToken>
    ) : BUCKSpecificHintableArea
    (
        ElementName = <HintableAreaElementName>
        DicoToken = <HintDico>
        HintTitleToken = <HintTitleToken>
        HintBodyToken = <HintBodyToken>
        HintExtendedToken = <HintExtendedToken>
    )

    Components =
    [
        BUCKTextureDescriptor
        (
            ComponentFrame = <BackgroundTextureFrameProperty>

            UseLocalRenderLayer = <UseLocalRenderLayer>
            LocalRenderLayer = <LocalRenderLayer>

            TextureToken = <BackgroundTexture>
            TextureFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1, 1]
            )
        ),
    ] + <Components> +

    (<HasText> | <TextToken> != "" ?
    [
        BUCKTextDescriptor
        (
            ElementName = <ElementName> + "TextElement"

            ComponentFrame = <TextComponentFrame>

            ParagraphStyle = <TextParagraphStyle>
            TextStyle = <TextStyle>
            TypefaceToken = <TextTypefaceToken>
            UniformDrawer = $/UserInterface/UIUniformDrawer

            UseLocalRenderLayer = <UseLocalRenderLayer>
            LocalRenderLayer = <BorderLocalRenderLayer>

            TextToken = <TextToken>
            TextDico = <TextDico>

            TextColor = <TextColorToken>
            TextSize = <TextSizeToken>
        )
    ] : []) +

    (<OverBlockTexture> != "" | <OverBlockColorToken> != "" ?
    [
        BUCKTextureDescriptor
        (
            ElementName = <ElementName> + "OverBlock"
            ComponentFrame = TUIFramePropertyRTTI
            (
               RelativeWidthHeight = [1.0, 1.0]
            )

            ComponentStateLocked = <OverBlockComponentStateLocked>
            UseLocalRenderLayer = <UseLocalRenderLayer>
            BackgroundLocalRenderLayer = <OverBlockLocalRenderLayer>
            LocalRenderLayer = <OverBlockLocalRenderLayer>

            HasBackground = <OverBlockColorToken> != "" ? true : false
            UniformDrawer = <UniformDrawer>
            BackgroundBlockColorToken = <OverBlockColorToken>

            TextureToken = <OverBlockTexture>
            TextureFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1, 1]
            )
        )
    ] : []) +

    (<ForegroundTexture> != "" ?
    [
        BUCKTextureDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
               RelativeWidthHeight = [1.0, 1.0]
            )

            UseLocalRenderLayer = <UseLocalRenderLayer>
            LocalRenderLayer = <ForegroundLocalRenderLayer>

            TextureToken = <ForegroundTexture>
            TextureFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1, 1]
            )
        )
    ] : []) +

    (<HintTitleToken> != "" | <HintBodyToken> != "" | <HintExtendedToken> != "" | <HintableAreaElementName> != "" ?
    [
        hintComponent,
    ] : [])

    AllowMultipleInputsPerFrame = <AllowMultipleInputsPerFrame>
    Grayed = <Grayed>
    IsTogglable = <IsTogglable>
    CannotDeselect = <CannotDeselect>
    ForceEvents = <ForceEvents>
    RadioButtonManager = <RadioButtonManager>
    HidePointerEvents = <HidePointerEvents>
    MaskEvents = <MaskEvents>

    Mapping = <Mapping>

    UniformDrawer = <UniformDrawer>

    HasBackground = <HasBackground>
    BackgroundBlockColorToken = <BackgroundColorToken>

    HoverSound = <HoverSound>
    ClickSound = <ClickSound>

    HasBorder = <HasBorder>
    BorderLineColorToken = <BorderLineColorToken>
    BorderThicknessToken = <BorderThickness>

    // BorderColorGrayedTokenBySide = <BorderColorGrayedTokenBySide>
    // BorderColorHighlightedTokenBySide = <BorderColorHighlightedTokenBySide>
    // BorderColorClickedTokenBySide = <BorderColorClickedTokenBySide>
    BorderColorTokenBySide = <BorderColorTokenBySide>

    UseLocalRenderLayer = <UseLocalRenderLayer>
    BackgroundLocalRenderLayer = <BackgroundLocalRenderLayer>
    BorderLocalRenderLayer = <BorderLocalRenderLayer>

    SpotlightComponent = <SpotlightComponent>
)

/// A DEPRECIER

template HUDDarkButton
[
    ElementName : string = '',
    UniqueName : string = '',

    ComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI( MagnifiableWidthHeight = DefaultButtonDims ),

    Components : LIST<TBUCKContainerDescriptor> = [],

    AllowMultipleInputsPerFrame : bool = false,

    Grayed : bool = false,
    IsTogglable : bool = false,
    HidePointerEvents : bool = false,

    HasText : bool = false,
    TextDico : string = ~/LocalisationConstantes/dico_interface_ingame,
    TextParagraphStyle : TParagraphStyleRTTI = ~/paragraphStyleTextCenter,
    TextSizeToken : string = "SD2_Petit",
    TextStyle : string = "Default",
    TextToken : string = '',
    TextTypefaceToken : string = "Main",

    HintTitleToken : string = "HUD_UNKN",
    HintBodyToken : string = "HUD_UNKN",
    HintExtendedToken : string = "HUD_UNKN",
    HintDico : string = ~/LocalisationConstantes/dico_interface_ingame,
    HintableAreaElementName : string = "",

    UniformDrawer : TUIUniformDrawer = $/UserInterface/UIUniformDrawer,

    HoverSound : TSoundDescriptor = nil,
    ClickSound : TSoundDescriptor = nil,

    Mapping : TEugBMutablePBaseClass = nil,


    TextColorToken : string = "ButtonHUD/Text",
    HasBackground : bool = true,
    BackgroundColorToken : string = "ButtonHUD/Background",

    OverBlockComponentStateLocked : bool = false,
    OverBlockColorToken : string = "",
    OverBlockTexture : string = "",

    // Bordure Externe
    HasBorder : bool = true,
    BorderThickness : string = "BoutonHUDDarkStyle/BordureExterne",
    BorderLineColorToken : string = "ButtonHUD/Border",

    ForegroundTexture : string = "",

    UseLocalRenderLayer : bool = false,
    BackgroundLocalRenderLayer : int = 0,
    LocalRenderLayer : int = 0,
    OverBlockLocalRenderLayer : int = 0,
    BorderLocalRenderLayer : int = 0,
    ForegroundLocalRenderLayer : int = 0,

    BackgroundTexture : string = "",
    BackgroundTextureFrameProperty : TUIFramePropertyRTTI = nil,

    SpotlightComponent : TBUCKContainerDescriptor = SpotlightDescriptor(),
]
is HUDButton
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>
    ComponentFrame = <ComponentFrame>

    HintTitleToken = <HintTitleToken>
    HintBodyToken = <HintBodyToken>
    HintExtendedToken = <HintExtendedToken>
    HintDico = <HintDico>

    Components = <Components>

    AllowMultipleInputsPerFrame = <AllowMultipleInputsPerFrame>
    Grayed = <Grayed>
    IsTogglable = <IsTogglable>
    HidePointerEvents = <HidePointerEvents>

    HasText = <HasText>
    TextParagraphStyle = <TextParagraphStyle>
    TextTypefaceToken = <TextTypefaceToken>
    TextSizeToken = <TextSizeToken>
    TextStyle = <TextStyle>
    TextToken = <TextToken>
    TextDico = <TextDico>

    UniformDrawer = <UniformDrawer>

    HoverSound = <HoverSound>
    ClickSound = <ClickSound>

    Mapping = <Mapping>

    TextColorToken = <TextColorToken>

    HasBackground = <HasBackground>
    BackgroundColorToken = <BackgroundColorToken>

    OverBlockComponentStateLocked = <OverBlockComponentStateLocked>
    OverBlockColorToken = <OverBlockColorToken>
    OverBlockTexture = <OverBlockTexture>

    HasBorder = <HasBorder>
    BorderThickness = <BorderThickness>
    BorderLineColorToken = <BorderLineColorToken>

    ForegroundTexture = <ForegroundTexture>

    UseLocalRenderLayer = <UseLocalRenderLayer>
    BackgroundLocalRenderLayer = <BackgroundLocalRenderLayer>
    LocalRenderLayer = <LocalRenderLayer>
    OverBlockLocalRenderLayer = <OverBlockLocalRenderLayer>
    BorderLocalRenderLayer = <BorderLocalRenderLayer>
    ForegroundLocalRenderLayer = <ForegroundLocalRenderLayer>

    BackgroundTexture = <BackgroundTexture>
    BackgroundTextureFrameProperty = <BackgroundTextureFrameProperty>

    SpotlightComponent = <SpotlightComponent>
)
//-------------------------------------------------------------------------------------
// Bouton carré / rectangulaire simple
//-------------------------------------------------------------------------------------
template TemplateBoutonSimple
[
ElementName : string ,
UniqueName : string = '',
Width : float ,
Height : float ,
TextToken : string,
BackgroundBlockColorToken : string,
BorderLineColorToken : string,
HintTitleToken :string = '',
HintBodyToken : string = '',
HintExtendedToken : string = '',
IsTogglable : boolean = false,
RadioButtonManager : TBUCKRadioButtonManager = nil,
TextSize : string = "SD2_Moyen",
TextColor : string = "ButtonHUD/Text2",
CannotDeselect : bool = false

]
is BUCKButtonDescriptor
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>
    SpotlightComponent = SpotlightDescriptor()

    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [<Width>,<Height>]
        //AlignementToFather = [ 0.0, 0.5 ]
        //AlignementToAnchor = [ 0.0, 0.5 ]
    )

    HasBorder = true
    BorderThicknessToken = '1'
    HasBackground = true
    BackgroundBlockColorToken = <BackgroundBlockColorToken>
    BorderLineColorToken = <BorderLineColorToken>
    IsTogglable = <IsTogglable>
    RadioButtonManager = <RadioButtonManager>
    HidePointerEvents = true
    CannotDeselect = <CannotDeselect>
    Components =
    [
        BUCKTextDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 1.0]
                AlignementToFather = [0.5, 0.5]
                AlignementToAnchor = [0.5, 0.5]
            )

            BigLineAction = ~/BigLineAction/MultiLine
            ParagraphStyle = ~/paragraphStyleTextCenter
            TextStyle = "Default"
            TypefaceToken = "Main"
            UniformDrawer = $/UserInterface/UIUniformDrawer

            TextToken = <TextToken>
            TextDico = ~/LocalisationConstantes/dico_interface_ingame

            TextColor = <TextColor>
            TextSize = <TextSize>
        ),
        BUCKSpecificHintableArea
        (
            DicoToken = ~/LocalisationConstantes/dico_interface_ingame
            HintTitleToken = <HintTitleToken>
            HintBodyToken = <HintBodyToken>
            HintExtendedToken = <HintExtendedToken>
        )
    ]
)
template TemplateBoutonSimple_Relative
[
ElementName : string ,
UniqueName : string = '',
TextToken : string,
BackgroundBlockColorToken : string,
BorderLineColorToken : string,
HintTitleToken :string = '',
HintBodyToken : string = '',
HintExtendedToken : string = '',
IsTogglable : boolean = false,
RadioButtonManager : TBUCKRadioButtonManager = nil,
TextSize : string = "SD2_Moyen",
TextColor : string = "ButtonHUD/Text2",
CannotDeselect : bool = false

]
is BUCKButtonDescriptor
(
    ElementName = <ElementName>
    UniqueName = <UniqueName>
    SpotlightComponent = SpotlightDescriptor()

    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = [1,1]
    )

    HasBorder = true
    BorderThicknessToken = '1'
    HasBackground = true
    BackgroundBlockColorToken = <BackgroundBlockColorToken>
    BorderLineColorToken = <BorderLineColorToken>
    IsTogglable = <IsTogglable>
    RadioButtonManager = <RadioButtonManager>
    HidePointerEvents = true
    CannotDeselect = <CannotDeselect>
    Components =
    [
        BUCKTextDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 1.0]
                AlignementToFather = [0.5, 0.5]
                AlignementToAnchor = [0.5, 0.5]
            )

            BigLineAction = ~/BigLineAction/MultiLine
            ParagraphStyle = ~/paragraphStyleTextCenter
            TextStyle = "Default"
            TypefaceToken = "Main"
            UniformDrawer = $/UserInterface/UIUniformDrawer

            TextToken = <TextToken>
            TextDico = ~/LocalisationConstantes/dico_interface_ingame

            TextColor = <TextColor>
            TextSize = <TextSize>
        ),
        BUCKSpecificHintableArea
        (
            DicoToken = ~/LocalisationConstantes/dico_interface_ingame
            HintTitleToken = <HintTitleToken>
            HintBodyToken = <HintBodyToken>
            HintExtendedToken = <HintExtendedToken>
        )
    ]
)