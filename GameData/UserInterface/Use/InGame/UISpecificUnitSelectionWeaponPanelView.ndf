// Index :
// • WeaponPanelWeaponButton (Container)
//      - WeaponPanelWeaponStatus (Container -> Text)
//      - WeaponPanelMainContainer (Button)
//      - WeaponPanelWeaponName (Container -> Text)
//      - WeaponPanelAmmunitionsButtonsContainer (Container)
//
// • WeaponPanelWeaponButtonBorder (Container)
// • WeaponPanelWeaponButtonOverblock (Container)
//
// • WeaponPanelMainContainer (Container)
//      - WeaponPanelBackgroundTexture (HUDBackgroundParallelogramFreize)
//      - WeaponPanelAPandHEIconsList (List)
//      - WeaponPanelWeaponStatusGaugeAndCalibre (Container)
//      - WeaponPanelWeaponIcon (Texture)
//
// • WeaponPanelAPandHEIconsList (List)
//      - WeaponPanelAPIcon (Container -> Text)
//      - WeaponPanelHEATIcon (Container -> Text)
//      - WeaponPanelHEIcon (Container -> Text)
//
// • WeaponPanelWeaponStatusGaugeAndCalibre (Container)
//      - WeaponPanelWeaponStatusGauge (BUCKSimpleGaugeDescriptor)
//      - WeaponPanelWeaponCalibre (Text)
//
// • WeaponPanelAmmunitionsButtonsContainer (Container)
//      - WeaponPanelAPButton (Button -> List -> Text)
//      - WeaponPanelHEButton (Button -> List -> Text)
//      - WeaponPanelAPCRButton (Button -> List -> Text)
//      - WeaponPanelAPHEButton (Button -> List -> Text)
//      - WeaponPanelSmokeButton (Button -> List -> Text)
//
// • UISpecificUnitSelectionWeaponPanelViewDescriptor (Vue)
//      - MainComponentDescriptor (WeaponPanelWeaponButton)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponButton
// -------------------------------------------------------------------------------------------------

// Weapon panel container
private WeaponPanelWeaponButton is BUCKButtonDescriptor
(
    ElementName = 'WeaponButton'

    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = [1.0, 0.0]
    )

    IsTogglable = true

    FitStyle = ~/ContainerFitStyle/FitToLargestBetweenChildAndParentVertically
    ChildFitToContent = true

    Components =
    [
        WeaponInformation(IsSelection = true),
        // Overblock
        ~/WeaponPanelWeaponButtonOverblock,
        // Border
        ~/WeaponPanelWeaponButtonBorder,
    ]
)

template WeaponInformation
[
    IsSelection : bool = true,
]
is BUCKListDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = [1.0, 0.0]
        AlignementToAnchor  = [0.5, 0.0]
        AlignementToFather  = [0.5, 0.0]
    )

    ChildFitToContent = true

    HasBackground = <IsSelection>
    BackgroundBlockColorToken = "SD2_BleuGrisLight"

    HasBorder = <IsSelection>
    BorderThicknessToken = "1"
    BorderLineColorToken = "SD2_LigneBleuGris"

    Axis = ~/ListAxis/Vertical
    Elements =
    [
        // Main container : HE Icon + AP Icon + Weapon Status Gauge + Weapon Icon + Calibre
        BUCKListElementDescriptor
        (
            ComponentDescriptor = WeaponPanelMainContainer(HasGauge = <IsSelection>)
        ),

        // Ammunitions buttons container
        BUCKListElementDescriptor
        (
            ExtendWeight = 1.0
            ComponentDescriptor = WeaponPanelAmmunitionsButtonsContainer(IsSelection = <IsSelection>)
        ),
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponButtonBorder
// -------------------------------------------------------------------------------------------------

// Border
private WeaponPanelWeaponButtonBorder is BUCKContainerDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight    = [1.0, 1.0]
        AlignementToFather     = [0.0, 0.5]
        AlignementToAnchor     = [0.0, 0.5]
    )

    HasBackground = false

    HasBorder = true
    BorderThicknessToken = "1"
    BorderLineColorToken = "WeaponButton/Border"
    BordersToDraw = ~/TBorderSide/Right | ~/TBorderSide/Left
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponButtonOverblock
// -------------------------------------------------------------------------------------------------

// Overblock
private WeaponPanelWeaponButtonOverblock is BUCKContainerDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight    = [1.0, 1.0]
    )

    HasBackground = true
    BackgroundBlockColorToken = "WeaponButton/Overblock"
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponStatus
// -------------------------------------------------------------------------------------------------

private WeaponPanelWeaponStatusMagnifiableHeight is 16.0

// Weapon status (Reloading, Aiming, Firing...)
private WeaponPanelWeaponStatus is BUCKTextDescriptor
(
    ElementName = 'ReloadStateText'
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [0.0, 14.0]
        AlignementToFather     = [0.0, 0.5]
        AlignementToAnchor     = [0.0, 0.5]
    )

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    TextPadding = TRTTILength4(Magnifiable = [6.0, 0.0, 6.0, 0.0])

    TextStyle = "DefaultUpperCase"

    HorizontalFitStyle = ~/FitStyle/FitToContent

    TypefaceToken = "Main"
    BigLineAction = ~/BigLineAction/CutByDots

    UniformDrawer = $/UserInterface/UIUniformDrawer

    TextDico = ~/LocalisationConstantes/dico_interface_ingame

    TextColor = "Glacier"
    TextSize = "10"

    // Hints
    Hint = BUCKSpecificHintableArea
    (
        DicoToken = ~/LocalisationConstantes/dico_interface_ingame
        HintTitleToken = "HSL_WGAUGT"
        HintBodyToken = "HSL_WGAUGB"
        HintExtendedToken = "HSL_WGAUGE"
    )
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelMainContainer
// -------------------------------------------------------------------------------------------------

private WeaponPanelMainContainerMagnifiableHeight is 56.0

// Main weapon container inside the weapon button
template WeaponPanelMainContainer
[
    HasGauge,
]
 is BUCKContainerDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight    = [1.0, 0.0]
        MagnifiableWidthHeight = [0.0, WeaponPanelMainContainerMagnifiableHeight]
        AlignementToFather     = [0.5, 0.0]
        AlignementToAnchor     = [0.5, 0.0]
    )

    // Used to clip background texture component to the container's size
    ClipContent = true

    Components =
    [
        // Gauge + Calibre
        WeaponPanelWeaponStatusGaugeAndCalibre(HasGauge = <HasGauge>),
        // Weapon Icon
        ~/WeaponPanelWeaponIcon,
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponStatusGaugeAndStatus
// -------------------------------------------------------------------------------------------------

// WeaponStatusGauge + WeaponCalibre
private WeaponPanelWeaponStatusGaugeAndStatus is BUCKListDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [0.0, WeaponPanelWeaponStatusGaugeMagnifiableHeight + 6.0]
    )

    Axis = ~/ListAxis/Horizontal
    BreadthComputationMode = ~/BreadthComputationMode/ComputeBreadthFromFrameProperty

    Elements =
    [
        BUCKListElementDescriptor
        (
            ExtendWeight = 1.0
            ComponentDescriptor = BUCKContainerDescriptor
            (
                ComponentFrame = TUIFramePropertyRTTI()
            )
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = ~/WeaponPanelWeaponStatus
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = ~/WeaponPanelWeaponStatusGauge
        ),
        BUCKListElementDescriptor
        (
            ExtendWeight = 1.0
            ComponentDescriptor = BUCKContainerDescriptor
            (
                ComponentFrame = TUIFramePropertyRTTI()
            )
        ),
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponStatusGaugeAndCalibre
// -------------------------------------------------------------------------------------------------

// WeaponStatusGauge + WeaponCalibre
template WeaponPanelWeaponStatusGaugeAndCalibre
[
    HasGauge,
]
is BUCKContainerDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight    = [1.0, 1.0]
        MagnifiableOffset      = [0.0, 2.0]
        AlignementToAnchor     = [0.5, 0.0]
        AlignementToFather     = [0.5, 0.0]
    )

    Components =
    [
        WeaponPanelWeaponName(IsSelection = <HasGauge>),
    ] +
    (<HasGauge> ?
    [
        ~/WeaponPanelWeaponStatusGaugeAndStatus
    ] : [])
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponStatusGauge
// -------------------------------------------------------------------------------------------------

private WeaponPanelWeaponStatusGaugeMagnifiableHeight is 9.0
private WeaponPanelWeaponStatusGaugeMagnifiableWidthHeight is 120.0

// Weapon status gauge (reloading, aiming, firing...)
private WeaponPanelWeaponStatusGauge is BUCKSimpleGaugeDescriptor
(
    ElementName = 'ReloadState'

    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [WeaponPanelWeaponStatusGaugeMagnifiableWidthHeight, WeaponPanelWeaponStatusGaugeMagnifiableHeight]
        AlignementToFather     = [0.0, 0.5]
        AlignementToAnchor     = [0.0, 0.5]
    )

    HasBorder = true
    BorderThicknessToken = "1"
    BorderLineColorToken = "DarkerGray"

    GaugeValueMinSize = TRTTILength( Pixel = 1.0 )
    DurationForGaugeFullChange = 1
    GaugeMax = 100

    GaugeComponentName = 'ReloadStateGaugeValue'

    Components =
    [
        BUCKContainerDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 1.0]
            )

            HasBackground = true
            BackgroundBlockColorToken = "Gray"
        ),

        BUCKSimpleGaugeValueDescriptor
        (
            ElementName = 'ReloadStateGaugeValue'
            ComponentFrame = TUIFramePropertyRTTI
            (
                MagnifiableWidthHeight = [0.0, WeaponPanelWeaponStatusGaugeMagnifiableHeight]
                AlignementToFather     = [0.0, 0.5]
                AlignementToAnchor     = [0.0, 0.5]
            )

            ValueContainerName = 'ReloadStateGaugeValueContainer'
            ValueContainerComponent = BUCKContainerDescriptor
            (
                ElementName = 'ReloadStateGaugeValueContainer'
                ComponentFrame = TUIFramePropertyRTTI
                (
                    RelativeWidthHeight = [0.0, 1.0]
                )

                HasBackground = true
                BackgroundBlockColorToken = "Glacier"
            )
        ),
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponCalibre
// -------------------------------------------------------------------------------------------------

private WeaponPanelWeaponCalibreMagnifiableHeight is 14.0
// Calibre
private WeaponPanelWeaponCalibre is BUCKTextDescriptor
(
    ElementName = 'WeaponCalibre'
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [0.0, WeaponPanelWeaponCalibreMagnifiableHeight]
        MagnifiableOffset      = [-1.0, -1.0]
        AlignementToFather     = [1.0, 1.0]
        AlignementToAnchor     = [1.0, 1.0]
    )

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Right
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    TextStyle = "Default"

    HorizontalFitStyle = ~/FitStyle/UserDefined

    TypefaceToken = "Main"
    BigLineAction = ~/BigLineAction/CutByDots

    UniformDrawer = $/UserInterface/UIUniformDrawer

    TextDico = ~/LocalisationConstantes/dico_interface_ingame

    TextColor = "SelectionPanel/Button"
    TextSize = "10"

    // Hints
    Hint = BUCKSpecificHintableArea
    (
        DicoToken = ~/LocalisationConstantes/dico_interface_ingame
        HintTitleToken = "HIP_WCALT"
        HintBodyToken = "HIP_WCALB"
        HintExtendedToken = "HIP_WCALE"
    )
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponIcon
// -------------------------------------------------------------------------------------------------

// Weapon Icon
private WeaponPanelWeaponIcon is BUCKTextureDescriptor
(
    ElementName = 'WeaponIcon'
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [132.0, 50.0]
        MagnifiableOffset      = [0.0, 4.0]
        AlignementToFather     = [0.5, 0.0]
        AlignementToAnchor     = [0.5, 0.0]
    )

    TextureFrame = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] )


    ClipContent = true

    Components =
    [
        // Hints
         BUCKSpecificHintableArea
         (
             DicoToken = ~/LocalisationConstantes/dico_interface_ingame
             HintTitleToken = "HSL_WIMGT"
             HintBodyToken = "HSL_WIMGB"
             HintExtendedToken = "HSL_WIMGE"
         )
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelWeaponName
// -------------------------------------------------------------------------------------------------

private WeaponPanelWeaponNameMagnifiableHeight is 19.0
// Weapon name container
template WeaponPanelWeaponName
[
    IsSelection,
]
is BUCKTextDescriptor
(
    ElementName = 'WeaponName'
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [0.0, 14.0]
        MagnifiableOffset      = [0.0, 0.0]
        AlignementToFather     = [0.5, 1.0]
        AlignementToAnchor     = [0.5, 1.0]
    )

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    TextStyle = "DefaultUpperCase"

    HorizontalFitStyle = ~/FitStyle/FitToContent

    TypefaceToken = "Main"
    BigLineAction = ~/BigLineAction/CutByDots

    UniformDrawer = $/UserInterface/UIUniformDrawer

    TextDico = ~/LocalisationConstantes/dico_unites

    TextColor = (<IsSelection> ? "SelectionPanel/Button" : "UnitInfoPanel/WeaponName")
    TextSize = "10"

    // Hints
    Hint = BUCKSpecificHintableArea
    (
        DicoToken = ~/LocalisationConstantes/dico_interface_ingame
        //Hints à créer
        HintTitleToken = ""
        HintBodyToken = ""
        HintExtendedToken = ""
    )
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelAmmunitionsContainer
// -------------------------------------------------------------------------------------------------


// Container for ammunitions buttons
template WeaponPanelAmmunitionsButtonsContainer
[
        IsSelection,
]

is BUCKContainerDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight    = [1.0, 0.0]
        AlignementToFather     = [0.5, 0.5]
        AlignementToAnchor     = [0.5, 0.5]
    )

    FitStyle = ~/ContainerFitStyle/FitToLargestBetweenChildAndParentVertically

    HasBackground = false

    Components =
    [
        BUCKListDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                MagnifiableOffset   = [0.0, -1.0]
                AlignementToFather  = [0.5, 1.0]
                AlignementToAnchor  = [0.5, 1.0]
            )

            Axis = ~/ListAxis/Vertical
            BreadthComputationMode = ~/BreadthComputationMode/ComputeBreadthFromFrameProperty

            FirstMargin = TRTTILength( Magnifiable = 3.0 )
            InterItemMargin = TRTTILength( Magnifiable = 1.0 )
            //LastMargin = TRTTILength( Magnifiable = 3.0 )}

            Elements =
            [
                BUCKListElementDescriptor
                (
                    ExtendWeight = 1.0
                    ComponentDescriptor = BUCKContainerDescriptor(ComponentFrame = TUIFramePropertyRTTI())
                ),

                // APCR
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelAPCRButton(IsSelection = <IsSelection>)
                ),
                // HEAT
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelHEATButton(IsSelection = <IsSelection>)
                ),

                // AP
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelAPButton(IsSelection = <IsSelection>)
                ),
                // APHE
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelAPHEButton(IsSelection = <IsSelection>)
                ),

                // HE/SAP
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelHESAPButton(IsSelection = <IsSelection>)
                ),

                // HE
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelHEButton(IsSelection = <IsSelection>)
                ),

                // Bullet
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelBulletButton(IsSelection = <IsSelection>)
                ),

                // Rockets
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelRocketHEButton(IsSelection = <IsSelection>)
                ),

                // RocketsAP
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelRocketAPButton(IsSelection = <IsSelection>)
                ),

                // RocketFrag
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelRocketFragButton(IsSelection = <IsSelection>)
                ),

                // Bomb
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelBombButton(IsSelection = <IsSelection>)
                ),

                // ClusterAP
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelClusterAPButton(IsSelection = <IsSelection>)
                ),

                // ClusterHE
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelClusterHEButton(IsSelection = <IsSelection>)
                ),

                // Napalm
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelNapalmButton(IsSelection = <IsSelection>)
                ),

                // Flame
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelFlameButton(IsSelection = <IsSelection>)
                ),

                // Smoke
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = WeaponPanelSmokeButton(IsSelection = <IsSelection>)
                ),
            ]
        ),
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelButton
// -------------------------------------------------------------------------------------------------

template WeaponPanelButton
[
    ElementName,
    ElementNameCalibre,
    ElementNameText,
    BackgroundBlockColorToken,
    TextToken,
    HintTitleToken,
    HintBodyToken,
    HintExtendedToken,
    IsSelection : bool = true ,
]
is BUCKSpecificButton
(
    ElementName = <ElementName>

    ButtonMagnifiableWidthHeight = [(<IsSelection> ? 150 : 150), 25.0]
    ButtonAlignementToFather = [0.5, 0.0]
    ButtonAlignementToAnchor = [0.5, 0.0]

    IsTogglable = true
    BorderLineColorToken = "Transparent" //(<IsSelection> ? "ButtonHUD/Border" : "ButtonHUD/Border2")
    BigBorderBackgroundColorToken = "Transparent" //(<IsSelection> ? "ButtonHUD/BigBorder" : "Transparent")
    BackgroundBlockColorToken  = (<IsSelection> ? "ButtonHUD/Background_gris" : "ButtonHUD/Background2")


    Components =
    [
        BUCKListDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [0.0, 1.0]
                AlignementToFather  = [0.0, 0.5]
                AlignementToAnchor  = [0.0, 0.5]
                MagnifiableOffset  = [0.0, 0.0]
            )

            Axis = ~/ListAxis/Horizontal
            BreadthComputationMode = ~/BreadthComputationMode/ComputeBreadthFromFrameProperty
            FirstMargin = TRTTILength( Magnifiable = 4.0 )
            LastMargin  = TRTTILength( Magnifiable = 4.0 )

            Elements =
            [
                // Text
                BUCKListElementDescriptor
                (
                    ExtendWeight = 1
                    ComponentDescriptor = BUCKContainerDescriptor
                    (
                        ComponentFrame = TUIFramePropertyRTTI()
                    )
                ),

                BUCKListElementDescriptor
                (
                    ComponentDescriptor = BUCKTextDescriptor
                    (
                        ElementName = <ElementNameCalibre>
                        ComponentFrame = TUIFramePropertyRTTI
                        (
                            AlignementToAnchor = [0.0, 0.5]
                            AlignementToFather = [0.0, 0.5]
                        )

                        ParagraphStyle = TParagraphStyleRTTI
                        (
                            Alignment = UIText_Center
                            VerticalAlignment = UIText_VerticalCenter
                            InterLine = 0
                        )

                        TextStyle = "Default"

                        HorizontalFitStyle = ~/FitStyle/FitToContent
                        VerticalFitStyle = ~/FitStyle/FitToContent

                        TypefaceToken = "Main"
                        BigLineAction = ~/BigLineAction/CutByDots

                        TextDico = ~/LocalisationConstantes/dico_interface_ingame
                        TextToken = <TextToken>

                        TextColor = (<IsSelection> ? "ButtonHUD/Text" : "ButtonHUD/Text2")
                        TextSize = "12"

                        // Hints
                        Hint = BUCKSpecificHintableArea
                        (
                            DicoToken = ~/LocalisationConstantes/dico_interface_ingame
                            HintTitleToken = <HintTitleToken>
                            HintBodyToken = <HintBodyToken>
                            HintExtendedToken = <HintExtendedToken>
                        )
                    )
                ),
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = BUCKTextDescriptor
                    (
                        ElementName = <ElementNameText>
                        ComponentFrame = TUIFramePropertyRTTI
                        (
                            AlignementToAnchor = [0.0, 0.5]
                            AlignementToFather = [0.0, 0.5]
                        )

                        ParagraphStyle = TParagraphStyleRTTI
                        (
                            Alignment = UIText_Center
                            VerticalAlignment = UIText_VerticalCenter
                            InterLine = 0
                        )

                        TextStyle = "Default"

                        HorizontalFitStyle = ~/FitStyle/FitToContent
                        VerticalFitStyle = ~/FitStyle/FitToContent

                        TypefaceToken = "Main"
                        BigLineAction = ~/BigLineAction/CutByDots

                        TextDico = ~/LocalisationConstantes/dico_interface_ingame

                        TextColor = "Glacier"
                        TextSize = "12"

                        // Hints
                        Hint = BUCKSpecificHintableArea
                        (
                            DicoToken = ~/LocalisationConstantes/dico_interface_ingame
                            HintTitleToken = <HintTitleToken>
                            HintBodyToken = <HintBodyToken>
                            HintExtendedToken = <HintExtendedToken>
                        )
                    )
                ),
                BUCKListElementDescriptor
                (
                    ExtendWeight = 1
                    ComponentDescriptor = BUCKContainerDescriptor
                    (
                        ComponentFrame = TUIFramePropertyRTTI()
                    )
                ),

            ]
        )
    ]
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelAPButton
// -------------------------------------------------------------------------------------------------

// AP button
template WeaponPanelAPButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'APButton'
    ElementNameText = 'WeaponAPAmmoText'
    ElementNameCalibre = 'WeaponAPCalibreText'
    BackgroundBlockColorToken = "WeaponButton/APButton"
    TextToken = "AMMOB_AP"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelHEATButton
// -------------------------------------------------------------------------------------------------

// HEAT button
template WeaponPanelHEATButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'HEATButton'
    ElementNameText = 'WeaponHEATAmmoText'
    ElementNameCalibre = 'WeaponHEATCalibreText'
    BackgroundBlockColorToken = "WeaponButton/APButton"
    TextToken = "AMMOB_HEAT"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)
// -------------------------------------------------------------------------------------------------
// WeaponPanelHESAPButton
// -------------------------------------------------------------------------------------------------

// HE Button
template WeaponPanelHESAPButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'HESAPButton'
    ElementNameText = 'WeaponHESAPAmmoText'
    ElementNameCalibre = 'WeaponHESAPCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_HESA"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)
// -------------------------------------------------------------------------------------------------
// WeaponPanelHEButton
// -------------------------------------------------------------------------------------------------

// HE Button
template WeaponPanelHEButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'HEButton'
    ElementNameText = 'WeaponHEAmmoText'
    ElementNameCalibre = 'WeaponHECalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_HE"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelAPCRButton
// -------------------------------------------------------------------------------------------------

// APCR button
template WeaponPanelAPCRButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'APCRButton'
    ElementNameText = 'WeaponAPCRAmmoText'
    ElementNameCalibre = 'WeaponAPCRCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_APCR"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelAPHEButton
// -------------------------------------------------------------------------------------------------

// APHE button (AP and HE combination)
template WeaponPanelAPHEButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'APHEButton'
    ElementNameText = 'WeaponAPHEAmmoText'
    ElementNameCalibre = 'WeaponAPHECalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_APHE"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelRocketButton
// -------------------------------------------------------------------------------------------------

// Rocket button
template WeaponPanelRocketHEButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'RocketHEButton'
    ElementNameText = 'WeaponRocketHEAmmoText'
    ElementNameCalibre = 'WeaponRocketHECalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_ROHE"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------

template WeaponPanelRocketAPButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'RocketAPButton'
    ElementNameText = 'WeaponRocketAPAmmoText'
    ElementNameCalibre = 'WeaponRocketAPCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_ROAP"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------

template WeaponPanelRocketFragButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'RocketFragButton'
    ElementNameText = 'WeaponRocketFragAmmoText'
    ElementNameCalibre = 'WeaponRocketFragCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_ROFR"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelBulletButton
// -------------------------------------------------------------------------------------------------

// Bullet button
template WeaponPanelBulletButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'BulletButton'
    ElementNameText = 'WeaponBulletAmmoText'
    ElementNameCalibre = 'WeaponBulletCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_BUL"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelBombButton
// -------------------------------------------------------------------------------------------------

// Bomb button
template WeaponPanelBombButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'BombButton'
    ElementNameText = 'WeaponBombAmmoText'
    ElementNameCalibre = 'WeaponBombCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_BOM"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------

template WeaponPanelClusterHEButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'ClusterHEButton'
    ElementNameText = 'WeaponClusterHEAmmoText'
    ElementNameCalibre = 'WeaponClusterHECalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_CLHE"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------

template WeaponPanelClusterAPButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'ClusterAPButton'
    ElementNameText = 'WeaponClusterAPAmmoText'
    ElementNameCalibre = 'WeaponClusterAPCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_CLAP"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------

template WeaponPanelNapalmButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'NapalmButton'
    ElementNameText = 'WeaponNapalmAmmoText'
    ElementNameCalibre = 'WeaponNapalmCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_NAPA"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>
)

// -------------------------------------------------------------------------------------------------
// WeaponPanelFlameButton
// -------------------------------------------------------------------------------------------------

// Flame button
template WeaponPanelFlameButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'FlameButton'
    ElementNameText = 'WeaponFlameAmmoText'
    ElementNameCalibre = 'WeaponFlameCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_FLA"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>

)

// -------------------------------------------------------------------------------------------------
// WeaponPanelSmokeButton
// -------------------------------------------------------------------------------------------------

// Smoke button
template WeaponPanelSmokeButton
[
    IsSelection : bool = true ,
]
is WeaponPanelButton
(
    ElementName = 'SmokeButton'
    ElementNameText = 'WeaponSmokeAmmoText'
    ElementNameCalibre = 'WeaponSmokeCalibreText'
    BackgroundBlockColorToken = "WeaponButton/HEButton"
    TextToken = "AMMOB_SMO"
    HintTitleToken = <IsSelection>  ? "HWP_ACTT"  : "HIP_AFINFT"
    HintBodyToken = <IsSelection>  ? "HWP_ACT"   : "HIP_AFINF"
    HintExtendedToken = ""
    IsSelection = <IsSelection>

)

UISpecificUnitSelectionWeaponPanelViewDescriptor is TUISpecificUnitSelectionWeaponPanelViewDescriptor
(
    MainComponentDescriptor = ~/WeaponPanelWeaponButton
    MainComponentContainerUniqueName = "" // Permet d'indiquer l'endroit ou le composant doit s'insérer
)
