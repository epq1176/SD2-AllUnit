//-------------------------------------------------------------------------
//----------------------------- ARTILLERY ---------------------------------
//-------------------------------------------------------------------------
// Maintains
//-------------------------------------------------------------------------
export ScnDef_Maintain_Artillery is TMacroActionDescriptor_Artillery_Specific
(
    GenerationType = TGenerationType_Maintain
)
// Missions
//-------------------------------------------------------------------------
private template ScnDef_Template_Artillery_TriggerHappy
[
    GenerationType = TGenerationType_FixedSize,
    NumberOfMacro:int = 0,
    MinimumResourceForLaunch:int = 0,
    ParametresDeMission = MAP[],
]
is TMacroActionDescriptor_Artillery_Specific
(
    GenerationType = <GenerationType>
    NumberOfMacro = <NumberOfMacro>
    MinimumResourceForLaunch = <MinimumResourceForLaunch>

    SupportPointSafetyMargin = 1
    MinimumThreatPerSplashForKill = 45 //30
    MinimumThreatPerSplashForSupport = 30 //20
    SupportStrikeRatio = [0.25]
    PrioritaryZoneWeightList = [66]
    IgnoreSafePath = true

    ArtilleryPositionOffset = 0 * Metre
    OutMapArtilleryPositionOffset = 0 * Metre
    ArtilleryUpdateOffset = 0 * Metre
    ThreatThresholdValue = 20
    MoveOutThreatProbability = 0.1

    DeployOnRoad = True
    DistanceToOptimumStartDuringDeployment = 3000*Metre

    ArtilleryStrikeThreatBonusPerTags =  // Multiplicateur appliqué lors du calcul de la menace d'unité. On applique le premier bonus qui match les tags de notre unité (1 par défaut)
    [
        (["Canon_AT"], 1.5),
        (["Canon_AA"], 1.5),
        (["Infanterie_Standard"], 1.5),
        (["Infanterie_SuperCMD"], 3.0),
        (["Infanterie_Spec_Defense"], 2.0),
        (["Artillerie"], 2.0),
        (["Vehicule_Logistique"], 2.0),
        (["Vehicule_SuperCMD"], 2.0),
        (["Infanterie"], 1.5),
        (["Vehicule"], 0.5),
        (["Char"], 0.3),
        (["Char_SuperCMD"], 0.5),
    ]

    PoolModelList = [
        ~/ScnDef_Pool_Artillery_TriggerHappy,
    ]

    ParametresDeMission = <ParametresDeMission>
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_TriggerHappy_1for4Corridors is ScnDef_Template_Artillery_TriggerHappy
(
    GenerationType = TGenerationType_BasedOnNumberOfCorridors
    ParametresDeMission = MAP[
        (
            ESettingType/Generation,
            TGenerationSettingHolder(NumberOfCorridorsPerMission = 4 ConsiderOnlySameDescriptor = true)
        ),
    ]
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_TriggerHappy_1for4Corridors_WeightExtended is ScnDef_Template_Artillery_TriggerHappy
(
    GenerationType = TGenerationType_BasedOnNumberOfCorridors
    ParametresDeMission = MAP[
        (
            ESettingType/Generation,
            TGenerationSettingHolder(NumberOfCorridorsPerMission = 4 ConsiderOnlySameDescriptor = true)
        ),
    ]
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_TriggerHappy is ScnDef_Template_Artillery_TriggerHappy
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_TriggerHappy_WeightExtended is ScnDef_Template_Artillery_TriggerHappy
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_TriggerHappy_Autogen is ScnDef_Template_Artillery_TriggerHappy
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1
    MinimumResourceForLaunch = ~/Scn_MinimumResourceForLaunch_Stage_1
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_TriggerHappy_Autogen_WeightExtended is ScnDef_Template_Artillery_TriggerHappy
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1
    MinimumResourceForLaunch = ~/Scn_MinimumResourceForLaunch_Stage_1
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_Support is TMacroActionDescriptor_Artillery_Specific
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1

    SupportPointSafetyMargin = 1
    MinimumThreatPerSplashForKill = 30 //20
    MinimumThreatPerSplashForSupport = 30 //15
    SupportStrikeRatio = [0.1]
    PrioritaryZoneWeightList = [66]
    IgnoreSafePath = true

    ArtilleryPositionOffset = 0 * Metre
    OutMapArtilleryPositionOffset = 0 * Metre
    ArtilleryUpdateOffset = 0 * Metre
    ThreatThresholdValue = 20
    MoveOutThreatProbability = 0.1

    DeployOnRoad = True
    DistanceToOptimumStartDuringDeployment = 3000*Metre

    ArtilleryStrikeThreatBonusPerTags =  // Multiplicateur appliqué lors du calcul de la menace d'unité. On applique le premier bonus qui match les tags de notre unité (1 par défaut)
    [
        (["Canon_AT"], 1.5),
        (["Canon_AA"], 1.5),
        (["Infanterie_Standard"], 2.5),
        (["Infanterie_Spec_Defense"], 2.5),
        (["Infanterie"], 2.0),
        (["Artillerie"], 1.5),
        (["Vehicule_Logistique"], 0.5),
        (["Vehicule"], 1.0),
        (["Char"], 0.5),
    ]

    PoolModelList = [
        ~/ScnDef_Pool_Artillery_Support,
    ]

    ParametresDeMission = MAP
    [
        (
            ESettingType/Coordination,
            TCoordinationSettingHolder(CoordinationType = ESupportingStatus/IsSupport)
        ),
    ]
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_Support_WeightExtended is TMacroActionDescriptor_Artillery_Specific
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1

    SupportPointSafetyMargin = 1
    MinimumThreatPerSplashForKill = 30 //20
    MinimumThreatPerSplashForSupport = 30 //15
    SupportStrikeRatio = [0.1]
    PrioritaryZoneWeightList = [66]

    ArtilleryPositionOffset = 0 * Metre
    OutMapArtilleryPositionOffset = 0 * Metre
    ArtilleryUpdateOffset = 0 * Metre
    ThreatThresholdValue = 20
    MoveOutThreatProbability = 0.1
    IgnoreSafePath = true

    DeployOnRoad = True
    DistanceToOptimumStartDuringDeployment = 3000*Metre

    ArtilleryStrikeThreatBonusPerTags =  // Multiplicateur appliqué lors du calcul de la menace d'unité. On applique le premier bonus qui match les tags de notre unité (1 par défaut)
    [
        (["Canon_AT"], 1.5),
        (["Canon_AA"], 1.5),
        (["Infanterie_Standard"], 2.5),
        (["Infanterie_Spec_Defense"], 2.5),
        (["Infanterie"], 2.0),
        (["Artillerie"], 1.5),
        (["Vehicule_Logistique"], 0.5),
        (["Vehicule"], 1.0),
        (["Char"], 0.5),
    ]

    PoolModelList = [
        ~/ScnDef_Pool_Artillery_Support,
    ]

    ParametresDeMission = MAP
    [
        (
            ESettingType/Coordination,
            TCoordinationSettingHolder(CoordinationType = ESupportingStatus/IsSupport)
        ),
    ]
)
//-------------------------------------------------------------------------
private template ScnDef_Template_Artillery_Expensive
[
    MinimumResourceForLaunch:int = 0,
]
is TMacroActionDescriptor_Artillery_Specific
(
    GenerationType = TGenerationType_FixedSize
    NumberOfMacro = 1
    MinimumResourceForLaunch = <MinimumResourceForLaunch>

    SupportPointSafetyMargin = 1
    MinimumThreatPerSplashForKill = 55
    MinimumThreatPerSplashForSupport = 999
    SupportStrikeRatio = [0.0]
    PrioritaryZoneWeightList = [66]

    ArtilleryPositionOffset = 0 * Metre
    OutMapArtilleryPositionOffset = 0 * Metre
    ArtilleryUpdateOffset = 0 * Metre
    ThreatThresholdValue = 20
    MoveOutThreatProbability = 0.1
    IgnoreSafePath = true

    DeployOnRoad = True
    DistanceToOptimumStartDuringDeployment = 3000*Metre

    ArtilleryStrikeThreatBonusPerTags =  // Multiplicateur appliqué lors du calcul de la menace d'unité. On applique le premier bonus qui match les tags de notre unité (1 par défaut)
    [
        (["Canon_AT"], 1.0),
        (["Canon_AA"], 1.0),
        (["Infanterie_Standard"], 2.5),
        (["Infanterie_Spec_Defense"], 2.5),
        (["Infanterie"], 2.0),
        (["Artillerie"], 3),
        (["Vehicule_Logistique"], 0.5),
        (["Vehicule"], 0.5),
        (["Char"], 0.5),
    ]

    ProdProperties = [TProdProperty_LaunchAsSoonAsPossible]

    PoolModelList = [
        ~/ScnDef_Pool_Artillery_Expensive,
    ]
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_Expensive is ScnDef_Template_Artillery_Expensive
(
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_Expensive_WeightExtended is ScnDef_Template_Artillery_Expensive
(
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_Expensive_Autogen is ScnDef_Template_Artillery_Expensive
(
    MinimumResourceForLaunch = ~/Scn_MinimumResourceForLaunch_Stage_1
)
//-------------------------------------------------------------------------
export ScnDef_Artillery_Expensive_Autogen_WeightExtended is ScnDef_Template_Artillery_Expensive
(
    MinimumResourceForLaunch = ~/Scn_MinimumResourceForLaunch_Stage_1
)


// Pool Models
//-------------------------------------------------------------------------
export ScnDef_Pool_Artillery_TriggerHappy is TPoolModel
(
    ModelList = [
    TPoolElement(
        DescriptorId = GUID:{54de236e-7592-11e9-8410-704d7b2c87d4}
        Required = true
        Nb = 1
        IndexPriorityOverPrice = true
        PriceComparisonMethod = EPriceComparatorType/Random
        TagsPriority = [
            "Artillerie_Longue_Portee",
            "Artillerie_Courte_Portee",
        ]
    ),
    ]
)
//-------------------------------------------------------------------------
export ScnDef_Pool_Artillery_Support is TPoolModel
(
    ModelList = [
    TPoolElement(
        DescriptorId = GUID:{54de236f-7592-11e9-bca3-704d7b2c87d4}
        Required = true
        Nb = 1
        IndexPriorityOverPrice = true
        PriceComparisonMethod = EPriceComparatorType/Cheapest
        TagsPriority = [
            "Artillerie_Courte_Portee",
            "Artillerie_Longue_Portee",
            "Artillerie_Observateur",
        ]
    ),
    ]
)
//-------------------------------------------------------------------------
export ScnDef_Pool_Artillery_Expensive is TPoolModel
(
    ModelList = [
    TPoolElement(
        DescriptorId = GUID:{54de2370-7592-11e9-b90f-704d7b2c87d4}
        Required = true
        Nb = 1
        IndexPriorityOverPrice = false
        PriceComparisonMethod = EPriceComparatorType/Random
        TagsPriority = [
            "Artillerie_MLRS",
            "Artillerie_Observateur",
        ]
        ForbiddenTags = [
            "Avion",
        ]
    ),
    ]
)

