Template TAnimNodeServantMGBrowning
[
IAStates : integer = ~/AnimationStateAll,
IAOldStates : integer = ~/AnimationStateAll,
DefaultAnimationStates : integer = ~/AnimationStateAll,
Childs             = [],
Loop     : boolean = true,
Top      : boolean = true,
Bot      : boolean = true,
Anim     : string  = '',
Side     : string  = '',
EventAnim : bool = false,
] is DepictionAnimationTreeNode
(
    IAStates = <IAStates>
    IAOldStates = <IAOldStates>
    DefaultAnimationStates = <DefaultAnimationStates>
    Childs = <Childs>
    UsedSlots = InfantryAnimationAllSlots
    private AnimationFileName is 'Gunner_MG_'+<Side>+ '_' + <Anim> + '.Ase2NdfBin'
    Animations =
    ( <Top> & <Bot> ?
    [TemplateAnimationTop(Animation=AnimationFileName Loop=<Loop> EventAnimation = <EventAnim>), TemplateAnimationBottom( Animation=AnimationFileName  Loop=<Loop> EventAnimation = <EventAnim>)]
    : ( <Top> ?
    [TemplateAnimationTop(Animation=AnimationFileName Loop=<Loop> EventAnimation = <EventAnim>)]
    : (<Bot> ?
    [TemplateAnimationBottom(Animation=AnimationFileName Loop=<Loop> EventAnimation = <EventAnim>)]
    : [] ) ) )
)


Template ServantMGBrowningAnimTree
[
    Side : string = ''
]
 is TAnimNodeServantMGBrowning
(
    IAStates = AnimationStateAll
    DefaultAnimationStates = ~/AnimationStateEngineStopping
    Childs =
    [
        TAnimNodeServant
        (
            IAStates = AnimationStateDestruction
            Anim = 'Dead'
            Loop = false
            Side = <Side>
        ),
        // TAnimNodeServantMGBrowning
        // (
        //     IAStates = AnimationStateContinuousFire
        //     Anim = 'Browning_Fire'
        //     Loop = true
        //     Side = <Side>
        // ),
        // TAnimNodeServantMG
        // (
        //     IAStates = AnimationStateAll
        //     IAOldStates = AnimationStateContinuousFire
        //     Anim = 'Reload'
        //     Loop = false
        //     EventAnim = true
        //     Side = <Side>
        // ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineStarting
            Anim = 'Fold'
            Loop = false
            Side = <Side>
        ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineRunning
            Anim = 'Move'
            Side = <Side>
            Childs = [
                TAnimNodeServantMGBrowning
                (
                    IAStates = AnimationStateBack
                    Anim = 'Move_Back'
                    Side = <Side>
                )
            ]
        ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineOff | AnimationStateEngineStopping
            Anim = 'Browning_Deploy'
            Loop = false
            Side = <Side>
        ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineStartTurning
            Anim = 'Fold'
            Loop = false
            Side = <Side>
        ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineTurning | AnimationStateLeft
            Anim = 'Turn_Left'
            Side = <Side>
        ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineTurning | AnimationStateRight
            Anim = 'Turn_Right'
            Side = <Side>
        ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateEngineStopTurning
            Anim = 'Browning_Deploy'
            Loop = false
            Side = <Side>
        ),
        // TAnimNodeServantMG
        // (
        //     IAStates = AnimationStateAttacking
        //     Anim = 'Fire'
        //     EventAnim = false
        //     Loop = true
        //     Side = <Side>
        // ),
        TAnimNodeServantMGBrowning
        (
            IAStates = AnimationStateSurrender
            Anim = 'Browning_Idle' // A remplacer par Surrender quand l'anim aura ete produite
            Loop = false
            Side = <Side>
        ),

    ]

    Anim = 'Browning_Idle'
    Side = <Side>
)


ServantMGBrowningAnimTreeGauche is ServantMGBrowningAnimTree(Side = 'L')
ServantMGBrowningAnimTreeDroite is ServantMGBrowningAnimTree(Side = 'R')


ServantMGBrowningCosmeticIKChainGaucheDesc is TCosmeticIKChainDesc
(
    TargetConstraints = [
                                TCosmeticIKTargetConstraintDesc( Target = 'hand_2' Anchor = 'Bip01 L Hand' ChainLength = 3),
                                TCosmeticIKTargetConstraintDesc( Target = 'hand_1' Anchor = 'Bip01 R Hand' ChainLength = 3)
                              ]
)
ServantMGBrowningCosmeticIKChainDroiteDesc is TCosmeticIKChainDesc
(
    TargetConstraints = [
                                TCosmeticIKTargetConstraintDesc( Target = 'hand_2' Anchor = 'Bip01 L Hand' ChainLength = 3),
                                TCosmeticIKTargetConstraintDesc( Target = 'hand_1' Anchor = 'Bip01 R Hand' ChainLength = 3)
                              ]
)

export DepictionOperator_Animation_ServantMG_Browning_Droite is [ Template_DepictionOperator_SkeletalAnimation_With_Tree( AnimationTree = ServantMGBrowningAnimTreeDroite ), ServantMGBrowningCosmeticIKChainGaucheDesc, ServantMGBrowningCosmeticIKChainDroiteDesc]
export DepictionOperator_Animation_ServantMG_Browning_Gauche is [ Template_DepictionOperator_SkeletalAnimation_With_Tree( AnimationTree = ServantMGBrowningAnimTreeGauche )]

