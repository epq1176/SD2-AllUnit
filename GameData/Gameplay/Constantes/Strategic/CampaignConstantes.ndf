StrategicCampaignConstantes is TStrategicCampaignConstantes
(
    MovementSmoothingMaxAngle = 30. // entre 10° (si vraiment besoin de moins, venir en discuter avec un dev) et 180° (équivaut à "pas d'angle max")
    MaxSubMovementLength = 250 * Metre

    BattleNbPhases = 3
    DureePhaseEnMinutes = [10, 10, 10] //On considere qu'une phase durera a peu pres 10 min (cf SDDEUX-546)
    PhaseNames = ["PHASE_A", "PHASE_B", "PHASE_C"]

    PawnDissolutionFactor = 0.70 //Un pion est dissout après le combat si sa dernière compagnie est en dessous de X% de son effectif initial
    CompanyDissolutionFactor = 0.3 //Une compagnie est dissoute après le combat si elle est en dessous de X% de son effectif initial
    FreeDefenseRadius = 1.75 * ~/ActionPointConsumptionRefs/CaseSize // Le rayon autour de l'unité attaquée dans lequel les unités alliés peuvent attaquer sans reset leur défense et sans bouger

    // Zocs
    ConflictingUnitRadius = 700 * Metre        //Taille de la ZOC des unités.
    EnemiesDisableSpawnRadius = 2 * ~/ActionPointConsumptionRefs/CaseSize    //Taille du rayon qui desactive les point de renfort
    EnemiesCaptureAirportRadius = 2 * ~/ActionPointConsumptionRefs/CaseSize        //Taille du rayon qui capture les aéroports
    APSlowZocMalus = 1.0
    APSlowZocMalusFeedbackDuration = 5//ticks
    DisableGroundZocsWhenNoAP = false
    DisableMoveOrderOnDisabledZocs = false
    FleeWhenNoAP = false // des adjustables sont à dispo dans steelman/zocs
    FleeToAlliesWhenNoAPIfPossible = true //true

    //----------
    // Airports
    AirportSlotsRadius = 200 * Metre // Le rayon de base autour de l'aéroport sur lequel se placent les avions
    NumberOfAerialUnitsPerRadius = 4 // Le nombre d'avions par rayon
    AlignAirplaneInAirportOnGrid = true

    //Regles du Tactique
    TacticalTimeLimit = 40
    TacticalScoreLimit = 2000

    //----------
    // Consequences de combat
    MaxActionPointsUsedByDefenseToFlee = MAP [
        (EVictoryType/Draw,             3),
        (EVictoryType/MinorVictory,     3),
        (EVictoryType/MajorVictory,     2),
        (EVictoryType/TotalVictory,     1),
    ]
    MaxActionPointsUsedByAttackToFlee = MAP [
        (EVictoryType/Draw,             3),
        (EVictoryType/MinorDefeat,      3),
        (EVictoryType/MajorDefeat,      3),
        (EVictoryType/TotalDefeat,      1),
    ]
    ActionPointsPenaltyForDefenseDefeat = MAP [
        (EVictoryType/MinorVictory,     4),
        (EVictoryType/MajorVictory,     4),
        (EVictoryType/TotalVictory,     4),
    ]
    ActionPointsPenaltyForAttackDefeat = MAP [
        (EVictoryType/MinorDefeat,      4),
        (EVictoryType/MajorDefeat,      4),
        (EVictoryType/TotalDefeat,      4),
    ]
    ActionPointsPenaltyForDefenseDefeatForPlane = MAP [
        (EVictoryType/MinorVictory,     4),
        (EVictoryType/MajorVictory,     4),
        (EVictoryType/TotalVictory,     4),
    ]
    ActionPointsPenaltyForAttackDefeatForPlane = MAP [
        (EVictoryType/MinorDefeat,      4),
        (EVictoryType/MajorDefeat,      4),
        (EVictoryType/TotalDefeat,      4),
    ]
    ActionPointsPenaltyForDefenseDefeatForOutMapArtillery = MAP [
        (EVictoryType/MinorVictory,     1),
        (EVictoryType/MajorVictory,     2),
        (EVictoryType/TotalVictory,     3),
    ]
    ActionPointsPenaltyForAttackDefeatForOutMapArtillery = MAP [
        (EVictoryType/MinorDefeat,      2),
        (EVictoryType/MajorDefeat,      3),
        (EVictoryType/TotalDefeat,      4),
    ]

    ActionPointsPenaltyForAllAttackersIntercepted = 5 // embuscade

    NbTurnToRepairDisabledUnit = 2

    NbColumnsPerFormationLine = 5
    DistanceBetweenFormationColumns = 500 * Metre
    DistanceBetweenFormationLines = 500 * Metre

    //cosmetique des ordres
    BattleArrowStartBorderColor = [0, 0, 0, 0]
    BattleArrowStartFillColor = [0, 0, 255, 0]
    BattleArrowStartThickness = 1200.0

    BattleArrowEndBorderColor = [0, 0, 0, 0]
    BattleArrowEndFillColor = [0, 0, 255, 0]
    BattleArrowEndThickness = 1200.0

    BattleArrowLength = 1000.0
    BattleArrowWidth = 3000.0
    BattleLineWidth = 30.0

    BattleArrowDuration = 1 //ticks
    TextFeedbackDurationMin = 4
    TextFeedbackDurationMax = 4

    ForbidTacticalFightOnStrategicSectors =
    [
        "Urban_Area",
    ]

    UnitsToKilometersMultiplier = 0.000006 * Metre //000008

    ShowDeathTextFeedback = false

    // Règles de multisélection
    MultiSelectionLimit = 5

    // Règles de compagnies
    MaxUnitsPerCompany = 9

    // Ecoulement du temps
    TurnTimeOfDay = ["StrMorn", "StrAftn"] // un tour de jeu a 8h, le suivant a 14h etc...

    SteelmanCombatFX = $/GFX/Everything/FX_Steelman_Combat_Binder
    SteelmanFxDuration = 1
    SteelmanCombatSound = $/VFX_Bank/SFX_Steelman_Combat_Sound

    SteelmanAirCombatFX = $/GFX/Everything/FX_Steelman_Combat_Binder
    SteelmanAirCombatFxDuration = 45
    SteelmanAirCombatSound = $/VFX_Bank/SFX_Steelman_Combat_Sound

    // Possibilite de conserver un ordre sur plusieurs tours
    MultipleTurnOrdersActivated = false

    DeployDisplayFactor = 0.1
    PowerValuesBattleFactor = 0.0045*1.2  // valeur du point de force dans l'affichage des pions et de la barre
    SpeedIncreaseBetweenTurns = 20 // vitesse des pions non pdt visibile pendant le tour de l'ia

    BattleNbBattleGroup = 5 // Nombre maximal de pions qui peuvent rejoindre le combat pour une équipe
    BattleNbSlotsAllowedPerBattleGroup = 1
    BattleNbMaxSupportPawn = 1 // Nombre maximal de pions support (hors avions) qui peuvent rejoindre le combat pour une équipe
    BattleNbMaxPlanePawn = 1 // Nombre maximal de pions avions qui peuvent rejoindre le combat pour une équipe

    SteelmanMaxUnitSelection = MAP[
        (ENationalite/Allied, 1),
        (ENationalite/Axis, 1)
    ]

    DefaultStartingTicketsPoints = MAP
    [
        (ENationalite/Allied, 20), //30
        (ENationalite/Axis, 20),
    ]

    DefaultTicketsPointsIncome = MAP // points par minute
    //(l'income de la phase A est adapté dans le code pour déduire les DefaultStartingTicketsPoints)
    //par exemple, 20 de starting, 5 d'income en A
    // => l'income A est baissé à 3 par le code pour avoir (20 + 10*3) = 50 en A
    [
        (ENationalite/Allied,   [5, 5, 5]), //[6, 6, 6]
        (ENationalite/Axis,     [5, 5, 5]),
    ]

    AerialBattleTicketsPoint = MAP
    [
        (ENationalite/Allied, 2000),   //350
        (ENationalite/Axis, 2000),     //350
    ]

    SolAirBattleTicketsPoint = MAP
    [
        (ENationalite/Allied, 2000),   //350
        (ENationalite/Axis, 2000),     //350
    ]

    // Score
    PointsPerUnitType = MAP [
        (ETypeStrategicCount/Soldier,        1),
        (ETypeStrategicCount/Tank,           30),
        (ETypeStrategicCount/Artillery,      10),
        (ETypeStrategicCount/Plane,          10),
    ]

    StrategicMapVictoryTypeFromScoreRatio = [
        (0.2   ,        EVictoryType/TotalDefeat),
        (0.4    ,         EVictoryType/MajorDefeat),
        (0.666    ,         EVictoryType/MinorDefeat),
        (1.0    ,         EVictoryType/Draw),
        (1.49    ,         EVictoryType/MinorVictory),
        (2.49   ,         EVictoryType/MajorVictory),
        (5      ,         EVictoryType/TotalVictory),
    ]

    ExperienceLevelToStatisticsModifier = MAP [
        (0, 1.0),
        (1, 1.33),
        (2, 1.66),
    ]

    //les tokens doivent être dans : INTERFACE_INGAME.csv
    NumberLimitAndTokenLimitByTag = MAP
    [
        ("HQ", (3, "MAXPAWNTAG")),
    ]

    // Production
    SnapCursorToSpawnRadius = 1200 * Metre
    ValidGhostColors = TGhostColors(
        GhostColor = [0, 255, 0, 128]
        GhostAlpha = 0.6
        GhostColor2 = [0, 255, 0, 128]
        GhostAlpha2 = 0.8
    )
    InvalidGhostColors = TGhostColors(
        GhostColor = [255, 0, 0, 128]
        GhostAlpha = 0.6
        GhostColor2 = [255, 0, 0, 128]
        GhostAlpha2 = 0.8
    )

    // Ordres
    ActionPointCostPerOrder = MAP [
        ("Shoot",                   3.0), // GroundDeny - les zones de ralentissement terrestres posées par bombardier et artilleries.
        ("AirplaneMoveAndEngage",   3.0), // Boxing/AirDeny - zones Air/Air
        ("AirplanePatrol",          3.0), // AirplaneReco - reconnaissance aérienne
        ("Bombarder",               3.0), // Bomb - bombardement single target (avion ou arti)
        ("Fortify",                 3.0), // Fortify - action de défense
        ("FortifyAntiAir",          2.0), // FortifyAntiAir - action de defense Anti aerienne des unites au sol
    ]
    SetupDurationPerOrder = MAP [
        ("FortifyAntiAir",          0), // FortifyAntiAir - action de defense Anti aerienne des unites au sol
    ]

    //Apparence
    OverrideModelWithMostRepresentativeUnitInDeck = false

    //IA steelman
    AvailableAIList =
    [
        IADifficulty/Facile,
        IADifficulty/Normal,
        IADifficulty/Difficile,
    ]

     //Bonus en pourcentage donnée à l'IA à l'income, selon la difficulté
    RelativeIABonusFluxByIADifficulty = MAP
    [
        (IADifficulty/TresFacile,            0.0),
        (IADifficulty/Facile,                0.0),
        (IADifficulty/Normal,                0.0),
        (IADifficulty/Difficile,             0.5),
        (IADifficulty/TresDifficile,         0.5),
        (IADifficulty/PlusDifficile,         0.7),
    ]


    // Niveau des IA en partie tactique selon le niveau d'IA steelman
    // le 1er élément du tableau est le niveau d'IA pour les IA du joueur
    // le 2nd élement du tableau est le niveau d'IA pour les IA adverses
    TacticalIALevelPerIADifficulty = MAP
    [
        (IADifficulty/TresFacile,          [IADifficulty/Difficile,     IADifficulty/Facile]),
        (IADifficulty/Facile,              [IADifficulty/Difficile,     IADifficulty/Normal]),
        (IADifficulty/Normal,              [IADifficulty/Normal,        IADifficulty/Normal]),
        (IADifficulty/Difficile,           [IADifficulty/Normal,        IADifficulty/Difficile]),
        (IADifficulty/TresDifficile,       [IADifficulty/Normal,        IADifficulty/Difficile]),
        (IADifficulty/PlusDifficile,       [IADifficulty/Difficile,     IADifficulty/TresDifficile]),
    ]

    // IA TActiques dans steelman, les niveaux ici correspondent à ceux paramétrés dans les tableaux de TacticalIALevelPerIADifficulty

    // Bonus en pourcentage donné à l'IA à l'income, par phase. Exemple : 0.0 = +0%, 0.10 = +10%
    // Remplace le RelativeBonusFluxByIADifficultyAndPhase de GDConstantes.ndf
    TacticalRelativeBonusFluxByIADifficultyAndPhase = MAP
    [
    //                                 Phase A         B         C
        (IADifficulty/TresFacile,          [0.0,      0.0,      0.0]),
        (IADifficulty/Facile,              [0.0,      0.0,      0.0]),
        (IADifficulty/Normal,              [0.0,      0.0,      0.0]),
        (IADifficulty/Difficile,           [0.5,      0.5,      0.5]),
        (IADifficulty/TresDifficile,       [0.5,      0.5,      0.5]),
        (IADifficulty/PlusDifficile,       [0.5,      0.5,      0.5]),
    ]

    // Bonus en pourcentage donné à IA à l'argent donné en début de phase. Exemple : 0.0 = +0%, 0.10 = +10%
    // Remplace le RelativeBonusPhaseStartByIADifficulty de GDConstantes.ndf
    TacticalRelativeBonusPhaseStartByIADifficulty = MAP
    [
    //                                 Phase A         B         C
        (IADifficulty/TresFacile,          [0.0,      0.0,      0.0]),
        (IADifficulty/Facile,              [0.0,      0.0,      0.0]),
        (IADifficulty/Normal,              [0.0,      0.0,      0.0]),
        (IADifficulty/Difficile,           [0.2,      0.0,      0.0]),
        (IADifficulty/TresDifficile,       [0.2,      0.0,      0.0]),
        (IADifficulty/PlusDifficile,       [0.2,      0.0,      0.0]),
    ]

    FXTokensForMoveSequence = ["Move"]
    FXTokensForDieSequence = ["Die"]
    FXTokensForArtiFireSequence = ["ArtiFire"]
    FXTokensForArtiBombSequence = ["ArtiBomb"]
    FXTokensForAerialBombSequence = ["AerBomb"]

    FleeMinimumCaseNumber = 1

    ActionPointConsumptionGridConstantsDescriptor = ~/ActionPointConsumptionGridConstants

    HideManual = true
)

export PhaseToAPCost is TPhaseToAPCostDescriptor
(
    Value = [3, 2, 1]
)

export PhaseToAPCostForPlane is TPhaseToAPCostDescriptor
(
    Value = [3, 0, 0]
)
